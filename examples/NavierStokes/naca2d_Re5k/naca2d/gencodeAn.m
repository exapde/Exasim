function [An,Anm] = gencodeAn(nl,uh,param,flux_type)
gamma = param(1);
dim = length(nl);
if dim==2
    r = uh(1);
    ru = uh(2);
    rv = uh(3);
    rE = uh(4);
    nx = nl(1);
    ny = nl(2);
    gam1 = gamma-1;
    run = ru*nx + rv*ny;
    rut = -ru*ny + rv*nx;
    un = run/r;
    ut = rut/r;
    P = gam1*(rE - r*(1/2)*(un^2+ut^2));
    a = sqrt(gamma*P/r);
    H = rE/r + P/r;
    K = [ 1 , 1 , 0 , 1 ;...
          un-a , un , 0 , un+a ;...
          ut , ut , 1 , ut ;...
          H - un*a , (1/2)*(un^2 + ut^2) , ut , H+un*a ];
    Kinv = (gam1/(2*a^2))*[ H + (a/gam1)*(un-a) , -(un+a/gam1) , -ut , 1 ;...
                            -2*H + (4/gam1)*a^2 , 2*un , 2*ut , -2 ;...
                            -2*(ut*a^2)/gam1 , 0 , 2*(a^2)/gam1 , 0 ;...
                            H - a*(un+a)/gam1 , -un+a/gam1 , -ut , 1 ];
    T = [ 1 , 0 , 0 , 0;...
          0 , nx , ny , 0;...
          0 , -ny , nx , 0;...
          0 , 0 , 0 , 1];
    Tinv = [ 1 , 0 , 0 , 0;...
             0 , nx ,-ny , 0;...
             0 , ny , nx , 0;...
             0 , 0 , 0 , 1];
    switch flux_type
        case 0 %%% Roe w/o entropy fix
            Lambda = [ un-a , 0 , 0 , 0 ;...
                        0 , un , 0 , 0 ;...
                        0 , 0 , un , 0 ;...
                        0 , 0 , 0 , un+a ];
            E = simplify(K * Lambda * Kinv);
            An = simplify(Tinv * E * T);
        case 1 %%% Absolute_Roe w/o entropy fix
            Lambda = [ abs(un-a) , 0 , 0 , 0 ;...
                             0 , abs(un) , 0 , 0 ;...
                             0 , 0 , abs(un) , 0 ;...
                             0 , 0 , 0 , abs(un+a) ];
            E = simplify(K * Lambda * Kinv);
            An = simplify(Tinv * E * T);
        case 2 %%% Lax Friedrich
            An = [ abs(un)+a , 0 , 0 , 0 ;...
                    0 , abs(un)+a , 0 , 0 ;...
                    0 , 0 , abs(un)+a , 0 ;...
                    0 , 0 , 0 , abs(un)+a ];
            An = simplify(An);            
        case 3
            Lambda1 = [ abs(un-a) , 0 , 0 , 0 ;...
                             0 , abs(un) , 0 , 0 ;...
                             0 , 0 , abs(un) , 0 ;...
                             0 , 0 , 0 , abs(un+a) ];
            Lambda2 = [ un-a , 0 , 0 , 0 ;...
                        0 , un , 0 , 0 ;...
                        0 , 0 , un , 0 ;...
                        0 , 0 , 0 , un+a ];
            Lambda = Lambda1+Lambda2;
            E = simplify(K * Lambda * Kinv);
            An = simplify(Tinv * E * T);
        case 4
            Lambda1 = [ abs(un-a) , 0 , 0 , 0 ;...
                             0 , abs(un) , 0 , 0 ;...
                             0 , 0 , abs(un) , 0 ;...
                             0 , 0 , 0 , abs(un+a) ];
            Lambda2 = [ un-a , 0 , 0 , 0 ;...
                        0 , un , 0 , 0 ;...
                        0 , 0 , un , 0 ;...
                        0 , 0 , 0 , un+a ];
            Lambda = Lambda1-Lambda2;
            E = simplify(K * Lambda * Kinv);
            An = simplify(Tinv * E * T);
    end
elseif dim==3
    r = uh(1);
    ru = uh(2);
    rv = uh(3);
    rw = uh(4);
    rE = uh(5);
    nx = nl(1);
    ny = nl(2);
    nz = nl(3);
    gam1 = gamma-1;
    cy = sqrt(nx^2+ny^2);
    sy = nz;
    cz = nx/cy;
    sz = ny/cy;
    Tz = [1, 0, 0, 0, 0;...
          0, cz, sz, 0, 0;...
          0, -sz, cz, 0, 0;...
          0, 0, 0, 1, 0;
          0, 0, 0, 0, 1];
    Ty = [1, 0, 0, 0, 0;...
          0, cy, 0, sy, 0;...
          0, 0, 1, 0, 0;...
          0, -sy, 0, cy, 0;
          0, 0, 0, 0, 1];
    T = Ty*Tz;
    Tinv = (Tz.')*(Ty.');
    U = [r, ru, rv, rw, rE].';
    TU = T*U;
    run = TU(2);
    rvn = TU(3);
    rwn = TU(4);
    un = run/r;
    vn = rvn/r;
    wn = rwn/r;
    P = gam1*(rE - r*(1/2)*(un^2 + vn^2 + wn^2));
    a = sqrt(gamma*P/r);
    H = rE/r + P/r;
    K = [ 1 , 1 , 0 , 0, 1 ;...
          un-a , un , 0 , 0, un+a ;...
          vn , vn , 1 , 0, vn ;...
          wn , wn , 0 , 1, wn ;...
          H - un*a , (1/2)*(un^2+vn^2+wn^2) , vn , wn, H+un*a ];
    Kinv = (gam1/(2*a^2))*[ H + (a/gam1)*(un-a) , -(un+a/gam1) , -vn , -wn, 1 ;...
                            -2*H + (4/gam1)*a^2 , 2*un , 2*vn , 2*wn, -2 ;...
                            -2*(vn*a^2)/gam1 , 0 , 2*(a^2)/gam1 , 0, 0 ;...
                            -2*wn*a^2/gam1 , 0 , 0 , 2*a^2/gam1, 0
                            H - a*(un+a)/gam1 , -un+a/gam1 , -vn , -wn, 1 ];
    if flux_type==0
        Lambda = [ un-a , 0 , 0 , 0 , 0;...
                    0 , un , 0 , 0 , 0;...
                    0 , 0 , un , 0 , 0;...
                    0 , 0 , 0 , un , 0; ...
                    0 , 0 , 0 , 0 , un+a ];
        E = simplify(K * Lambda * Kinv);
        An = simplify(Tinv * E * T);
    elseif flux_type==1
        Lambda = [ abs(un-a) , 0 , 0 , 0 , 0;...
                    0 , abs(un) , 0 , 0 , 0;...
                    0 , 0 , abs(un) , 0 , 0;...
                    0 , 0 , 0 , abs(un) , 0; ...
                    0 , 0 , 0 , 0 , abs(un+a) ];
        E = (K * Lambda * Kinv);
        An = (Tinv * E * T);
    elseif flux_type==2
        An = [ abs(un)+a , 0 , 0 , 0 , 0;...
                0 , abs(un)+a , 0 , 0 , 0;...
                0 , 0 , abs(un)+a , 0 , 0;...
                0 , 0 , 0 , abs(un)+a , 0; ...
                0 , 0 , 0 , 0 , abs(un)+a ];
    elseif flux_type==3
        Lambda1 = [ abs(un-a) , 0 , 0 , 0 , 0;...
                    0 , abs(un) , 0 , 0 , 0;...
                    0 , 0 , abs(un) , 0 , 0;...
                    0 , 0 , 0 , abs(un) , 0; ...
                    0 , 0 , 0 , 0 , abs(un+a) ];
        Lambda2 = [ un-a , 0 , 0 , 0 , 0;...
                    0 , un , 0 , 0 , 0;...
                    0 , 0 , un , 0 , 0;...
                    0 , 0 , 0 , un , 0; ...
                    0 , 0 , 0 , 0 , un+a ];
        Lambda = Lambda1+Lambda2;
        E = simplify(K * Lambda * Kinv);
        An = simplify(Tinv * E * T);
    elseif flux_type==4
        Lambda1 = [ abs(un-a) , 0 , 0 , 0 , 0;...
                    0 , abs(un) , 0 , 0 , 0;...
                    0 , 0 , abs(un) , 0 , 0;...
                    0 , 0 , 0 , abs(un) , 0; ...
                    0 , 0 , 0 , 0 , abs(un+a) ];
        Lambda2 = [ un-a , 0 , 0 , 0 , 0;...
                    0 , un , 0 , 0 , 0;...
                    0 , 0 , un , 0 , 0;...
                    0 , 0 , 0 , un , 0; ...
                    0 , 0 , 0 , 0 , un+a ];
        Lambda = Lambda1-Lambda2;
        E = simplify(K * Lambda * Kinv);
        An = simplify(Tinv * E * T);
    end
end


