scalars t

vectors x(3), uq(4), v(0), w(0), uhat(1), n(3), tau(1), mu(5), eta(0)

jacobian uq, w, uhat 

hessian 

batch x, uq, v, w, uhat, n

outputs Flux, Source, Tdfunc, Ubou, Fbou, FbouHdg, Initu

function Flux(x, uq, v, w, eta, mu, t)  
  output_size(f) = 3;
  kappa = mu[0];
  f[0] = kappa*uq[1];
  f[1] = kappa*uq[2];
  f[2] = kappa*uq[3];
end

function Source(x, uq, v, w, eta, mu, t)  
  output_size(s) = 1;  
  s[0] = 0.0; 
end

function Tdfunc(x, uq, v, w, eta, mu, t)  
  output_size(m) = 1;
  ones(m);
end

function Fbou(x, uq, v, w, uhat, n, tau, eta, mu, t)
  output_size(fb) = 1;
  f = Flux(x, uq, v, w, eta, mu, t);  
  fb[0] = f[0]*n[0] + f[1]*n[1] + f[2]*n[2] + tau[0]*(uq[0]-uhat[0]);
end

function Ubou(x, uq, v, w, uhat, n, tau, eta, mu, t)
  output_size(ub) = 1;
  ub[0] = 0.0;
end

function FbouHdg(x, uq, v, w, uhat, n, tau, eta, mu, t)
  output_size(fb) = 2;
  fb[0] = tau[0]*(mu[1] - uhat[0]);  
  f = Flux(x, uq, v, w, eta, mu, t);  
  fb[1] = f[0]*n[0] + f[1]*n[1] + f[2]*n[2] + tau[0]*(uq[0]-uhat[0]) - (mu[2]*n[0]+mu[3]*n[1]+mu[4]*n[2]);
end

function Initu(x, eta, mu)
  output_size(ui) = 1;
  ui[0] = 0.0;
end



