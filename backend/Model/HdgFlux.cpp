void HdgFlux(dstype* f, dstype* J1, dstype* J2, const dstype* x, const dstype* uq, const dstype* v, const dstype* w, const dstype* eta, const dstype* mu, const dstype t, const int modelnumber, const int N, const int szx, const int szuq, const int szv, const int szw, const int szeta, const int szmu)
{

  Kokkos::parallel_for("Flux", N, KOKKOS_LAMBDA(const size_t i) {
    dstype uq0 = uq[0*N+i];
    dstype uq1 = uq[1*N+i];
    dstype uq2 = uq[2*N+i];
    dstype uq3 = uq[3*N+i];
    dstype uq4 = uq[4*N+i];
    dstype uq5 = uq[5*N+i];
    dstype uq6 = uq[6*N+i];
    dstype uq7 = uq[7*N+i];
    dstype uq8 = uq[8*N+i];
    dstype uq9 = uq[9*N+i];
    dstype uq10 = uq[10*N+i];
    dstype uq11 = uq[11*N+i];
    dstype mu0 = mu[0];
    dstype mu1 = mu[1];
    dstype mu2 = mu[2];
    dstype x0 = -1.0 + mu0;
    dstype x1 = pow(uq2, 2);
    dstype x2 = pow(uq0, -2);
    dstype x3 = x2*x1;
    dstype x4 = pow(uq1, 2);
    dstype x5 = x2*x4;
    dstype x6 = 0.5*(x3 + x5);
    dstype x7 = uq3 - x6*uq0;
    dstype x8 = x0*x7;
    dstype x9 = pow(uq0, -1);
    dstype x10 = x9*uq2;
    dstype x11 = uq10 - uq8*x10;
    dstype x12 = x9*x11;
    dstype x13 = x9*uq1;
    dstype x14 = uq5 - uq4*x13;
    dstype x15 = x9*x14;
    dstype x16 = -x12 + 2*x15;
    dstype x17 = pow(mu1, -1);
    dstype x18 = 0.666666666666667*x17;
    dstype x19 = x18*x16;
    dstype x20 = uq6 - uq4*x10;
    dstype x21 = uq9 - uq8*x13;
    dstype x22 = (x9*x20 + x9*x21)*x17;
    dstype x23 = x22 + uq2*x13;
    dstype x24 = x2*x20;
    dstype x25 = uq2*x24;
    dstype x26 = x2*x14;
    dstype x27 = uq1*x26;
    dstype x28 = x0*(uq7 - x6*uq4 - (x25 + x27)*uq0);
    dstype x29 = uq0*x28 - x8*uq4;
    dstype x30 = x2*x17;
    dstype x31 = mu0/mu2;
    dstype x32 = x31/x0;
    dstype x33 = x30*x32;
    dstype x34 = x9*x17;
    dstype x35 = 0.666666666666667*x34;
    dstype x36 = x35*x16;
    dstype x37 = x0*x9;
    dstype x38 = x7*x37 + x9*uq3;
    dstype x39 = 2*x12 - x15;
    dstype x40 = x39*x18;
    dstype x41 = x2*x11;
    dstype x42 = uq2*x41;
    dstype x43 = x2*x21;
    dstype x44 = uq1*x43;
    dstype x45 = x0*(uq11 - x6*uq8 - (x42 + x44)*uq0);
    dstype x46 = uq0*x45 - x8*uq8;
    dstype x47 = x35*x39;
    dstype x48 = pow(uq0, -3);
    dstype x49 = uq4*x48;
    dstype x50 = uq1*x49;
    dstype x51 = uq8*x48;
    dstype x52 = uq2*x51;
    dstype x53 = x41 - x52;
    dstype x54 = -2*x26 + 2*x50 + x53;
    dstype x55 = x4*x48;
    dstype x56 = x1*x48;
    dstype x57 = 0.5*(-2*x55 - 2*x56);
    dstype x58 = -0.5*x3 - 0.5*x5;
    dstype x59 = x58 - uq0*x57;
    dstype x60 = x0*x59;
    dstype x61 = x2*uq1;
    dstype x62 = uq2*x61;
    dstype x63 = uq1*x51;
    dstype x64 = uq2*x49;
    dstype x65 = (-x24 - x43 + x63 + x64)*x17;
    dstype x66 = -x62 + x65;
    dstype x67 = -x2*uq3 - x2*x8 + x59*x37;
    dstype x68 = x2*uq2;
    dstype x69 = 2*x48;
    dstype x70 = uq1*x69;
    dstype x71 = uq2*x69;
    dstype x72 = pow(uq0, -4);
    dstype x73 = x4*x72;
    dstype x74 = x1*x72;
    dstype x75 = x0*uq0;
    dstype x76 = x69*x32*x17;
    dstype x77 = x26 - x50;
    dstype x78 = -2*x41 + 2*x52 + x77;
    dstype x79 = uq4*x30;
    dstype x80 = 1.0*x37;
    dstype x81 = uq1*x80;
    dstype x82 = -x81;
    dstype x83 = uq8*x30;
    dstype x84 = x10 - x83;
    dstype x85 = 1.0*x0;
    dstype x86 = x50*x17;
    dstype x87 = x52*x17;
    dstype x88 = 1.0*uq4;
    dstype x89 = x2*x18;
    dstype x90 = 1.0*uq8;
    dstype x91 = -x85*x62 + x9*x22;
    dstype x92 = uq2*x80;
    dstype x93 = -x92;
    dstype x94 = x13 - x79;
    dstype x95 = x37 + x9;
    dstype x96 = uq1*x30;
    dstype x97 = 1.33333333333333*x96;
    dstype x98 = uq2*x30;
    dstype x99 = -x98;
    dstype x100 = x56*x17;
    dstype x101 = x55*x17;
    dstype x102 = x33*(-x8 + x75*(x58 - (-x55 - x56)*uq0));
    dstype x103 = x61*x18;
    dstype x104 = -0.333333333333333*uq2*uq1*x48*x17;
    dstype x105 = 1.33333333333333*x34;
    dstype x106 = -x96*x31;
    dstype x107 = -x35;
    dstype x108 = x68*x18;
    dstype x109 = -x98*x31;
    dstype x110 = x31*x34;
    dstype x111 = -x96;
    dstype x112 = 1.33333333333333*x98;

    f[0 * N + i] = uq1;
    f[1 * N + i] = x19 + x8 + x4*x9;
    f[2 * N + i] = x23;
    f[3 * N + i] = uq1*x36 + uq1*x38 + x22*x10 + x33*x29;
    f[4 * N + i] = uq2;
    f[5 * N + i] = x23;
    f[6 * N + i] = x40 + x8 + x1*x9;
    f[7 * N + i] = uq2*x38 + uq2*x47 + x22*x13 + x46*x33;
    J1[0 * N + i] = 0;
    J1[1 * N + i] = -x5 + x60 + x54*x18;
    J1[2 * N + i] = x66;
    J1[3 * N + i] = uq1*x67 + x33*(x28 - uq4*x60 + x75*(-x25 - x27 - uq4*x57 - (uq4*x73 + uq4*x74 - x70*x14 - x71*x20)*uq0)) - x61*x19 + x65*x10 - x68*x22 - x76*x29 + uq1*x54*x35;
    J1[4 * N + i] = 0;
    J1[5 * N + i] = x66;
    J1[6 * N + i] = -x3 + x60 + x78*x18;
    J1[7 * N + i] = uq2*x67 + x33*(x45 - uq8*x60 + x75*(-x42 - x44 - uq8*x57 - (uq8*x73 + uq8*x74 - x70*x21 - x71*x11)*uq0)) - x61*x22 + x65*x13 - x68*x40 - x76*x46 + uq2*x78*x35;
    J1[8 * N + i] = 1;
    J1[9 * N + i] = 2*x13 - 1.33333333333333*x79 + x82;
    J1[10 * N + i] = x84;
    J1[11 * N + i] = x36 + x38 - 1.33333333333333*x86 - x87 + x33*(uq4*x81 + x75*(-uq0*x77 - x88*x61)) - x5*x85;
    J1[12 * N + i] = 0;
    J1[13 * N + i] = x84;
    J1[14 * N + i] = x82 + uq4*x89;
    J1[15 * N + i] = x91 + x33*(uq8*x81 + x75*(-x61*x90 - (x43 - x63)*uq0)) - x63*x17 + x64*x18;
    J1[16 * N + i] = 0;
    J1[17 * N + i] = x93 + uq8*x89;
    J1[18 * N + i] = x94;
    J1[19 * N + i] = x91 + x33*(uq4*x92 + x75*(-x88*x68 - (x24 - x64)*uq0)) + x63*x18 - x64*x17;
    J1[20 * N + i] = 1;
    J1[21 * N + i] = x94;
    J1[22 * N + i] = 2*x10 - 1.33333333333333*x83 + x93;
    J1[23 * N + i] = x38 + x47 - x86 - 1.33333333333333*x87 - x3*x85 + x33*(uq8*x92 + x75*(-uq0*x53 - x68*x90));
    J1[24 * N + i] = 0;
    J1[25 * N + i] = x0;
    J1[26 * N + i] = 0;
    J1[27 * N + i] = uq1*x95 - x79*x31;
    J1[28 * N + i] = 0;
    J1[29 * N + i] = 0;
    J1[30 * N + i] = x0;
    J1[31 * N + i] = uq2*x95 - x83*x31;
    J1[32 * N + i] = 0;
    J1[33 * N + i] = -x97;
    J1[34 * N + i] = x99;
    J1[35 * N + i] = -x100 - 1.33333333333333*x101 + x102;
    J1[36 * N + i] = 0;
    J1[37 * N + i] = x99;
    J1[38 * N + i] = x103;
    J1[39 * N + i] = x104;
    J1[40 * N + i] = 0;
    J1[41 * N + i] = x105;
    J1[42 * N + i] = 0;
    J1[43 * N + i] = x106 + x97;
    J1[44 * N + i] = 0;
    J1[45 * N + i] = 0;
    J1[46 * N + i] = x107;
    J1[47 * N + i] = -x108;
    J1[48 * N + i] = 0;
    J1[49 * N + i] = 0;
    J1[50 * N + i] = x34;
    J1[51 * N + i] = x109 + x98;
    J1[52 * N + i] = 0;
    J1[53 * N + i] = x34;
    J1[54 * N + i] = 0;
    J1[55 * N + i] = x96;
    J1[56 * N + i] = 0;
    J1[57 * N + i] = 0;
    J1[58 * N + i] = 0;
    J1[59 * N + i] = x110;
    J1[60 * N + i] = 0;
    J1[61 * N + i] = 0;
    J1[62 * N + i] = 0;
    J1[63 * N + i] = 0;
    J1[64 * N + i] = 0;
    J1[65 * N + i] = x108;
    J1[66 * N + i] = x111;
    J1[67 * N + i] = x104;
    J1[68 * N + i] = 0;
    J1[69 * N + i] = x111;
    J1[70 * N + i] = -x112;
    J1[71 * N + i] = -1.33333333333333*x100 - x101 + x102;
    J1[72 * N + i] = 0;
    J1[73 * N + i] = 0;
    J1[74 * N + i] = x34;
    J1[75 * N + i] = x98;
    J1[76 * N + i] = 0;
    J1[77 * N + i] = x34;
    J1[78 * N + i] = 0;
    J1[79 * N + i] = x106 + x96;
    J1[80 * N + i] = 0;
    J1[81 * N + i] = x107;
    J1[82 * N + i] = 0;
    J1[83 * N + i] = -x103;
    J1[84 * N + i] = 0;
    J1[85 * N + i] = 0;
    J1[86 * N + i] = x105;
    J1[87 * N + i] = x109 + x112;
    J1[88 * N + i] = 0;
    J1[89 * N + i] = 0;
    J1[90 * N + i] = 0;
    J1[91 * N + i] = 0;
    J1[92 * N + i] = 0;
    J1[93 * N + i] = 0;
    J1[94 * N + i] = 0;
    J1[95 * N + i] = x110;
  });
}

