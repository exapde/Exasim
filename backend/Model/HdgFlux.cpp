void HdgFlux(dstype* f, dstype* f_udg, dstype* f_wdg, const dstype* xdg, const dstype* udg, const dstype* odg, const dstype* wdg, const dstype* uinf, const dstype* param, const dstype time, const int modelnumber, const int ng, const int nc, const int ncu, const int nd, const int ncx, const int nco, const int ncw)
{
	Kokkos::parallel_for("Flux", ng, KOKKOS_LAMBDA(const size_t i) {
		dstype param1 = param[0];
		dstype param2 = param[1];
		dstype param3 = param[2];
		dstype udg1 = udg[0*ng+i];
		dstype udg2 = udg[1*ng+i];
		dstype udg3 = udg[2*ng+i];
		dstype udg4 = udg[3*ng+i];
		dstype udg5 = udg[4*ng+i];
		dstype udg6 = udg[5*ng+i];
		dstype udg7 = udg[6*ng+i];
		dstype udg8 = udg[7*ng+i];
		dstype udg9 = udg[8*ng+i];
		dstype udg10 = udg[9*ng+i];
		dstype udg11 = udg[10*ng+i];
		dstype udg12 = udg[11*ng+i];
		{
		dstype t2 = udg2*udg2;
		dstype t3 = 1.0/(udg1*udg1);
		dstype t4 = 1.0/udg1;
		dstype t5 = 1.0/param2;
		dstype t6 = t2*t3*(1.0/2.0);
		dstype t7 = udg3*udg3;
		dstype t8 = t3*t7*(1.0/2.0);
		dstype t9 = t6+t8;
		dstype t23 = t9*udg1;
		dstype t10 = -t23+udg4;
		dstype t11 = param1-1.0;
		dstype t22 = t4*udg3*udg5;
		dstype t12 = -t22+udg7;
		dstype t13 = t4*t12;
		dstype t24 = t4*udg2*udg9;
		dstype t14 = -t24+udg10;
		dstype t15 = t4*t14;
		dstype t16 = t13+t15;
		dstype t21 = t4*udg2*udg5;
		dstype t17 = -t21+udg6;
		dstype t18 = t4*t17*2.0;
		dstype t29 = t4*udg3*udg9;
		dstype t19 = -t29+udg11;
		dstype t20 = t18-t4*t19;
		dstype t25 = t5*t16;
		dstype t26 = t4*udg2*udg3;
		dstype t27 = t25+t26;
		dstype t28 = t10*t11;
		dstype t30 = t4*udg4;
		dstype t31 = t4*t10*t11;
		dstype t32 = t30+t31;
		dstype t33 = t4*t17;
		dstype t34 = t33-t4*t19*2.0;
		dstype t35 = 1.0/param3;
		dstype t36 = 1.0/t11;
		f[0*ng+i] = udg2;
		f[1*ng+i] = t28+t2*t4+t5*t20*(2.0/3.0);
		f[2*ng+i] = t27;
		f[3*ng+i] = t32*udg2+t4*t5*t16*udg3+t4*t5*t20*udg2*(2.0/3.0)-param1*t3*t5*t35*t36*(t11*udg1*(-udg8+t9*udg5+udg1*(t3*t12*udg3+t3*t17*udg2))+t10*t11*udg5);
		f[4*ng+i] = udg3;
		f[5*ng+i] = t27;
		f[6*ng+i] = t28+t4*t7-t5*t34*(2.0/3.0);
		f[7*ng+i] = t32*udg3+t4*t5*t16*udg2-t4*t5*t34*udg3*(2.0/3.0)-param1*t3*t5*t35*t36*(t11*udg1*(-udg12+t9*udg9+udg1*(t3*t14*udg2+t3*t19*udg3))+t10*t11*udg9);
		}
		{
		dstype t2 = 1.0/(udg1*udg1);
		dstype t3 = 1.0/udg1;
		dstype t4 = 1.0/(udg1*udg1*udg1);
		dstype t5 = udg2*udg2;
		dstype t6 = udg3*udg3;
		dstype t7 = 1.0/param2;
		dstype t8 = t2*t5*(1.0/2.0);
		dstype t9 = t2*t6*(1.0/2.0);
		dstype t10 = param1-1.0;
		dstype t11 = t4*t5;
		dstype t12 = t4*t6;
		dstype t13 = t11+t12;
		dstype t39 = t13*udg1;
		dstype t14 = t8+t9-t39;
		dstype t19 = t3*udg3*udg5;
		dstype t15 = -t19+udg7;
		dstype t21 = t3*udg2*udg9;
		dstype t16 = -t21+udg10;
		dstype t24 = t3*udg2*udg5;
		dstype t17 = -t24+udg6;
		dstype t26 = t3*udg3*udg9;
		dstype t18 = -t26+udg11;
		dstype t20 = t2*t15;
		dstype t22 = t2*t16;
		dstype t41 = t4*udg3*udg5;
		dstype t42 = t4*udg2*udg9;
		dstype t23 = t20+t22-t41-t42;
		dstype t25 = t2*t17*2.0;
		dstype t27 = t4*udg3*udg9;
		dstype t73 = t2*t18;
		dstype t28 = t25+t27-t73-t4*udg2*udg5*2.0;
		dstype t29 = t8+t9;
		dstype t45 = t29*udg1;
		dstype t30 = -t45+udg4;
		dstype t31 = 1.0/param3;
		dstype t32 = 1.0/t10;
		dstype t33 = t29*udg5;
		dstype t34 = t2*t17*udg2;
		dstype t35 = t2*t15*udg3;
		dstype t36 = t34+t35;
		dstype t37 = t36*udg1;
		dstype t38 = t33+t37-udg8;
		dstype t40 = 1.0/(udg1*udg1*udg1*udg1);
		dstype t43 = -t7*t23-t2*udg2*udg3;
		dstype t44 = t2*udg4;
		dstype t46 = t2*t10*t30;
		dstype t47 = t3*t10*t14;
		dstype t48 = t44+t46+t47;
		dstype t49 = t3*t15;
		dstype t50 = t3*t16;
		dstype t51 = t49+t50;
		dstype t52 = t2*t17;
		dstype t53 = t4*udg3*udg9*2.0;
		dstype t63 = t4*udg2*udg5;
		dstype t54 = t52+t53-t63-t2*t18*2.0;
		dstype t55 = t29*udg9;
		dstype t56 = t2*t16*udg2;
		dstype t57 = t2*t18*udg3;
		dstype t58 = t56+t57;
		dstype t59 = t58*udg1;
		dstype t60 = t55+t59-udg12;
		dstype t61 = t3*t17*2.0;
		dstype t62 = t61-t3*t18;
		dstype t64 = t3*udg3;
		dstype t65 = t64-t2*t7*udg9;
		dstype t66 = t3*t7*t51;
		dstype t67 = t3*udg2;
		dstype t68 = t67-t2*t7*udg5;
		dstype t69 = t3*udg4;
		dstype t70 = t3*t10*t30;
		dstype t71 = t3*t17;
		dstype t72 = t71-t3*t18*2.0;
		dstype t74 = t3*t10;
		dstype t75 = t3+t74;
		dstype t76 = t3*t7;
		dstype t77 = t2*t7*udg2;
		dstype t78 = t10*t30;
		dstype t79 = t10*t14*udg1;
		dstype t80 = t78+t79;
		dstype t81 = t2*t7*udg3;
		dstype t82 = t2*t7*udg2*(2.0/3.0);
		dstype t83 = t3*t7*(4.0/3.0);
		dstype t84 = param1*t3*t7*t31;
		f_udg[0*ng+i] = 0.0;
		f_udg[1*ng+i] = -t2*t5-t10*t14-t7*t28*(2.0/3.0);
		f_udg[2*ng+i] = t43;
		f_udg[3*ng+i] = -t48*udg2-t3*t7*t23*udg3-t3*t7*t28*udg2*(2.0/3.0)-t2*t7*t51*udg3-t2*t7*t62*udg2*(2.0/3.0)-param1*t2*t7*t31*t32*(t10*t38+t10*udg1*(t34+t35-udg1*(t4*t15*udg3*2.0+t4*t17*udg2*2.0-t5*t40*udg5-t6*t40*udg5)-t13*udg5)-t10*t14*udg5)+param1*t4*t7*t31*t32*(t10*t30*udg5+t10*t38*udg1)*2.0;
		f_udg[4*ng+i] = 0.0;
		f_udg[5*ng+i] = t43;
		f_udg[6*ng+i] = -t2*t6-t10*t14+t7*t54*(2.0/3.0);
		f_udg[7*ng+i] = -t48*udg3-t3*t7*t23*udg2-t2*t7*t51*udg2+t3*t7*t54*udg3*(2.0/3.0)+t2*t7*t72*udg3*(2.0/3.0)-param1*t2*t7*t31*t32*(t10*t60+t10*udg1*(t56+t57-udg1*(t4*t16*udg2*2.0+t4*t18*udg3*2.0-t5*t40*udg9-t6*t40*udg9)-t13*udg9)-t10*t14*udg9)+param1*t4*t7*t31*t32*(t10*t30*udg9+t10*t60*udg1)*2.0;
		f_udg[8*ng+i] = 1.0;
		f_udg[9*ng+i] = t3*udg2*2.0-t2*t7*udg5*(4.0/3.0)-t3*t10*udg2;
		f_udg[10*ng+i] = t65;
		f_udg[11*ng+i] = t69+t70-t2*t5*t10+t3*t7*t62*(2.0/3.0)-t4*t7*udg2*udg5*(4.0/3.0)-t4*t7*udg3*udg9-param1*t2*t7*t31*t32*(t10*udg1*(udg1*(t52-t63)+t2*udg2*udg5)-t3*t10*udg2*udg5);
		f_udg[12*ng+i] = 0.0;
		f_udg[13*ng+i] = t65;
		f_udg[14*ng+i] = t2*t7*udg5*(2.0/3.0)-t3*t10*udg2;
		f_udg[15*ng+i] = t66-t2*t10*udg2*udg3+t4*t7*udg3*udg5*(2.0/3.0)-t4*t7*udg2*udg9-param1*t2*t7*t31*t32*(t10*udg1*(udg1*(t22-t42)+t2*udg2*udg9)-t3*t10*udg2*udg9);
		f_udg[16*ng+i] = 0.0;
		f_udg[17*ng+i] = -t3*t10*udg3+t2*t7*udg9*(2.0/3.0);
		f_udg[18*ng+i] = t68;
		f_udg[19*ng+i] = t66-t2*t10*udg2*udg3-t4*t7*udg3*udg5+t4*t7*udg2*udg9*(2.0/3.0)-param1*t2*t7*t31*t32*(t10*udg1*(udg1*(t20-t41)+t2*udg3*udg5)-t3*t10*udg3*udg5);
		f_udg[20*ng+i] = 1.0;
		f_udg[21*ng+i] = t68;
		f_udg[22*ng+i] = t3*udg3*2.0-t3*t10*udg3-t2*t7*udg9*(4.0/3.0);
		f_udg[23*ng+i] = t69+t70-t2*t6*t10-t3*t7*t72*(2.0/3.0)-t4*t7*udg2*udg5-t4*t7*udg3*udg9*(4.0/3.0)+param1*t2*t7*t31*t32*(t10*udg1*(udg1*(t27-t73)-t2*udg3*udg9)+t3*t10*udg3*udg9);
		f_udg[24*ng+i] = 0.0;
		f_udg[25*ng+i] = t10;
		f_udg[26*ng+i] = 0.0;
		f_udg[27*ng+i] = t75*udg2-param1*t2*t7*t31*udg5;
		f_udg[28*ng+i] = 0.0;
		f_udg[29*ng+i] = 0.0;
		f_udg[30*ng+i] = t10;
		f_udg[31*ng+i] = t75*udg3-param1*t2*t7*t31*udg9;
		f_udg[32*ng+i] = 0.0;
		f_udg[33*ng+i] = t2*t7*udg2*(-4.0/3.0);
		f_udg[34*ng+i] = -t2*t7*udg3;
		f_udg[35*ng+i] = t4*t5*t7*(-4.0/3.0)-t4*t6*t7-param1*t2*t7*t31*t32*t80;
		f_udg[36*ng+i] = 0.0;
		f_udg[37*ng+i] = -t2*t7*udg3;
		f_udg[38*ng+i] = t82;
		f_udg[39*ng+i] = t4*t7*udg2*udg3*(-1.0/3.0);
		f_udg[40*ng+i] = 0.0;
		f_udg[41*ng+i] = t83;
		f_udg[42*ng+i] = 0.0;
		f_udg[43*ng+i] = t2*t7*udg2*(4.0/3.0)-param1*t2*t7*t31*udg2;
		f_udg[44*ng+i] = 0.0;
		f_udg[45*ng+i] = 0.0;
		f_udg[46*ng+i] = t3*t7*(-2.0/3.0);
		f_udg[47*ng+i] = t2*t7*udg3*(-2.0/3.0);
		f_udg[48*ng+i] = 0.0;
		f_udg[49*ng+i] = 0.0;
		f_udg[50*ng+i] = t76;
		f_udg[51*ng+i] = t81-param1*t2*t7*t31*udg3;
		f_udg[52*ng+i] = 0.0;
		f_udg[53*ng+i] = t76;
		f_udg[54*ng+i] = 0.0;
		f_udg[55*ng+i] = t77;
		f_udg[56*ng+i] = 0.0;
		f_udg[57*ng+i] = 0.0;
		f_udg[58*ng+i] = 0.0;
		f_udg[59*ng+i] = t84;
		f_udg[60*ng+i] = 0.0;
		f_udg[61*ng+i] = 0.0;
		f_udg[62*ng+i] = 0.0;
		f_udg[63*ng+i] = 0.0;
		f_udg[64*ng+i] = 0.0;
		f_udg[65*ng+i] = t2*t7*udg3*(2.0/3.0);
		f_udg[66*ng+i] = -t77;
		f_udg[67*ng+i] = t4*t7*udg2*udg3*(-1.0/3.0);
		f_udg[68*ng+i] = 0.0;
		f_udg[69*ng+i] = -t77;
		f_udg[70*ng+i] = t2*t7*udg3*(-4.0/3.0);
		f_udg[71*ng+i] = -t4*t5*t7-t4*t6*t7*(4.0/3.0)-param1*t2*t7*t31*t32*t80;
		f_udg[72*ng+i] = 0.0;
		f_udg[73*ng+i] = 0.0;
		f_udg[74*ng+i] = t76;
		f_udg[75*ng+i] = t81;
		f_udg[76*ng+i] = 0.0;
		f_udg[77*ng+i] = t76;
		f_udg[78*ng+i] = 0.0;
		f_udg[79*ng+i] = t77-param1*t2*t7*t31*udg2;
		f_udg[80*ng+i] = 0.0;
		f_udg[81*ng+i] = t3*t7*(-2.0/3.0);
		f_udg[82*ng+i] = 0.0;
		f_udg[83*ng+i] = -t82;
		f_udg[84*ng+i] = 0.0;
		f_udg[85*ng+i] = 0.0;
		f_udg[86*ng+i] = t83;
		f_udg[87*ng+i] = t2*t7*udg3*(4.0/3.0)-param1*t2*t7*t31*udg3;
		f_udg[88*ng+i] = 0.0;
		f_udg[89*ng+i] = 0.0;
		f_udg[90*ng+i] = 0.0;
		f_udg[91*ng+i] = 0.0;
		f_udg[92*ng+i] = 0.0;
		f_udg[93*ng+i] = 0.0;
		f_udg[94*ng+i] = 0.0;
		f_udg[95*ng+i] = t84;
		}
	});
}

