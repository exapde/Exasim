void HdgFlux(dstype* f, dstype* f_udg, dstype* f_wdg, const dstype* xdg, const dstype* udg, const dstype* odg, const dstype* wdg, const dstype* uinf, const dstype* param, const dstype time, const int modelnumber, const int ng, const int nc, const int ncu, const int nd, const int ncx, const int nco, const int ncw)
{
	Kokkos::parallel_for("Flux", ng, KOKKOS_LAMBDA(const size_t i) {
		dstype param1 = param[0];
		dstype udg1 = udg[0*ng+i];
		dstype udg2 = udg[1*ng+i];
		dstype udg3 = udg[2*ng+i];
		dstype udg4 = udg[3*ng+i];
		{
		dstype t2 = udg2*udg2;
		dstype t3 = udg3*udg3;
		dstype t4 = param1-1.0;
		dstype t5 = 1.0/udg1;
		dstype t6 = t5*t5;
		dstype t7 = t5*udg4;
		dstype t8 = t5*udg2*udg3;
		dstype t9 = t2*t6;
		dstype t10 = t3*t6;
		dstype t11 = t9+t10;
		dstype t12 = (t11*udg1)/2.0;
		dstype t15 = -t4*(t12-udg4);
		dstype t16 = t5*t15;
		dstype t17 = t7+t16;
		f[0*ng+i] = udg2;
		f[1*ng+i] = t15+t2*t5;
		f[2*ng+i] = t8;
		f[3*ng+i] = t17*udg2;
		f[4*ng+i] = udg3;
		f[5*ng+i] = t8;
		f[6*ng+i] = t15+t3*t5;
		f[7*ng+i] = t17*udg3;
		}
		{
		dstype t2 = udg2*udg2;
		dstype t3 = udg3*udg3;
		dstype t4 = param1-1.0;
		dstype t5 = 1.0/udg1;
		dstype t6 = t5*t5;
		dstype t7 = t5*t5*t5;
		dstype t8 = t5*udg2;
		dstype t9 = t5*udg3;
		dstype t10 = t5*udg4;
		dstype t15 = t4*t5;
		dstype t11 = t6*udg4;
		dstype t12 = t6*udg2*udg3;
		dstype t13 = t2*t6;
		dstype t14 = t3*t6;
		dstype t16 = t2*t7*2.0;
		dstype t17 = t3*t7*2.0;
		dstype t19 = t4*t8;
		dstype t20 = t4*t9;
		dstype t27 = t5+t15;
		dstype t18 = -t12;
		dstype t21 = t13/2.0;
		dstype t22 = t14/2.0;
		dstype t24 = -t19;
		dstype t25 = -t20;
		dstype t28 = t13+t14;
		dstype t29 = t16+t17;
		dstype t26 = t4*t18;
		dstype t30 = (t28*udg1)/2.0;
		dstype t32 = (t29*udg1)/2.0;
		dstype t34 = -t32;
		dstype t35 = -t15*(t30-udg4);
		dstype t36 = -t4*t6*(t30-udg4);
		dstype t37 = t21+t22+t34;
		dstype t38 = t4*t37;
		dstype t40 = t15*t37;
		dstype t39 = -t38;
		dstype t41 = t11+t36+t40;
		f_udg[0*ng+i] = 0.0;
		f_udg[1*ng+i] = -t13+t39;
		f_udg[2*ng+i] = t18;
		f_udg[3*ng+i] = -t41*udg2;
		f_udg[4*ng+i] = 0.0;
		f_udg[5*ng+i] = t18;
		f_udg[6*ng+i] = -t14+t39;
		f_udg[7*ng+i] = -t41*udg3;
		f_udg[8*ng+i] = 1.0;
		f_udg[9*ng+i] = t8*2.0+t24;
		f_udg[10*ng+i] = t9;
		f_udg[11*ng+i] = t10+t35-t4*t13;
		f_udg[12*ng+i] = 0.0;
		f_udg[13*ng+i] = t9;
		f_udg[14*ng+i] = t24;
		f_udg[15*ng+i] = t26;
		f_udg[16*ng+i] = 0.0;
		f_udg[17*ng+i] = t25;
		f_udg[18*ng+i] = t8;
		f_udg[19*ng+i] = t26;
		f_udg[20*ng+i] = 1.0;
		f_udg[21*ng+i] = t8;
		f_udg[22*ng+i] = t9*2.0+t25;
		f_udg[23*ng+i] = t10+t35-t4*t14;
		f_udg[24*ng+i] = 0.0;
		f_udg[25*ng+i] = t4;
		f_udg[26*ng+i] = 0.0;
		f_udg[27*ng+i] = t27*udg2;
		f_udg[28*ng+i] = 0.0;
		f_udg[29*ng+i] = 0.0;
		f_udg[30*ng+i] = t4;
		f_udg[31*ng+i] = t27*udg3;
		}
	});
}

