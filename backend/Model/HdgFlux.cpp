void HdgFlux(dstype* f, dstype* f_udg, dstype* f_wdg, const dstype* xdg, const dstype* udg, const dstype* odg, const dstype* wdg, const dstype* uinf, const dstype* param, const dstype time, const int modelnumber, const int ng, const int nc, const int ncu, const int nd, const int ncx, const int nco, const int ncw)
{
	Kokkos::parallel_for("Flux", ng, KOKKOS_LAMBDA(const size_t i) {
		dstype param1 = param[0];
		dstype udg1 = udg[0*ng+i];
		dstype udg2 = udg[1*ng+i];
		dstype udg3 = udg[2*ng+i];
		dstype udg4 = udg[3*ng+i];
		dstype udg5 = udg[4*ng+i];
		dstype udg6 = udg[5*ng+i];
		dstype udg7 = udg[6*ng+i];
		{
		dstype t2 = udg5*udg6;
		dstype t3 = udg2*udg2;
		dstype t4 = udg3*udg3;
		dstype t5 = udg5*udg5;
		dstype t6 = udg6*udg6;
		dstype t7 = udg7*udg7;
		dstype t8 = param1-1.0;
		dstype t9 = -udg4;
		dstype t10 = 1.0/udg1;
		dstype t11 = t10*t10;
		dstype t12 = -t2;
		dstype t13 = t10*udg4;
		dstype t14 = t10*udg2*udg3;
		dstype t15 = t10*udg2*udg5;
		dstype t16 = t10*udg2*udg6;
		dstype t17 = t10*udg3*udg5;
		dstype t18 = t10*udg3*udg6;
		dstype t19 = t5/2.0;
		dstype t20 = t6/2.0;
		dstype t21 = t7/2.0;
		dstype t22 = (t3*t11)/2.0;
		dstype t23 = (t4*t11)/2.0;
		dstype t24 = t12+t14;
		dstype t25 = t15+t18;
		dstype t26 = t19+t20;
		dstype t27 = t10*t26;
		dstype t28 = t22+t23;
		dstype t29 = t28*udg1;
		dstype t30 = t9+t21+t26+t29;
		dstype t31 = t8*t30;
		dstype t32 = -t31;
		dstype t34 = t10*t32;
		dstype t35 = t13+t27+t34;
		f[0*ng+i] = udg2;
		f[1*ng+i] = -t19+t20+t32+t3*t10;
		f[2*ng+i] = t24;
		f[3*ng+i] = -t25*udg5+t35*udg2+udg5*udg7;
		f[4*ng+i] = udg7;
		f[5*ng+i] = t16-t17;
		f[6*ng+i] = udg5;
		f[7*ng+i] = udg3;
		f[8*ng+i] = t24;
		f[9*ng+i] = t19-t20+t32+t4*t10;
		f[10*ng+i] = -t25*udg6+t35*udg3+udg6*udg7;
		f[11*ng+i] = -t16+t17;
		f[12*ng+i] = udg7;
		f[13*ng+i] = udg6;
		}
		{
		dstype t2 = udg2*udg2;
		dstype t3 = udg3*udg3;
		dstype t4 = udg5*udg5;
		dstype t5 = udg6*udg6;
		dstype t6 = udg7*udg7;
		dstype t7 = param1-1.0;
		dstype t8 = -udg4;
		dstype t9 = -udg5;
		dstype t10 = -udg6;
		dstype t11 = 1.0/udg1;
		dstype t12 = t11*t11;
		dstype t13 = t11*t11*t11;
		dstype t16 = t7*udg7;
		dstype t17 = t11*udg2;
		dstype t18 = t11*udg3;
		dstype t19 = t11*udg4;
		dstype t20 = t11*udg5;
		dstype t22 = t11*udg6;
		dstype t29 = t4/2.0;
		dstype t30 = t5/2.0;
		dstype t31 = t6/2.0;
		dstype t34 = t7*t9;
		dstype t35 = t7*t10;
		dstype t37 = t7*t11;
		dstype t21 = t12*udg4;
		dstype t23 = t12*udg2*udg3;
		dstype t24 = t12*udg2*udg5;
		dstype t25 = t12*udg2*udg6;
		dstype t26 = t12*udg3*udg5;
		dstype t27 = t12*udg3*udg6;
		dstype t32 = t2*t13;
		dstype t33 = t3*t13;
		dstype t36 = -t16;
		dstype t39 = t9*t22;
		dstype t40 = t7*t17;
		dstype t41 = t7*t18;
		dstype t44 = (t2*t12)/2.0;
		dstype t45 = (t3*t12)/2.0;
		dstype t49 = t11*t34;
		dstype t50 = t11*t35;
		dstype t52 = t11+t37;
		dstype t54 = t29+t30;
		dstype t38 = -t23;
		dstype t47 = -t40;
		dstype t48 = -t41;
		dstype t53 = t24+t27;
		dstype t55 = t32+t33;
		dstype t57 = t20+t49;
		dstype t58 = t22+t50;
		dstype t59 = t11*t54;
		dstype t60 = t12*t54;
		dstype t63 = t44+t45;
		dstype t51 = t7*t38;
		dstype t56 = t55*udg1;
		dstype t64 = t63*udg1;
		dstype t61 = -t56;
		dstype t62 = t39+t51;
		dstype t67 = t8+t31+t54+t64;
		dstype t65 = t61+t63;
		dstype t70 = t37*t67;
		dstype t71 = t7*t12*t67;
		dstype t66 = t7*t65;
		dstype t69 = t37*t65;
		dstype t72 = -t70;
		dstype t73 = -t71;
		dstype t68 = -t66;
		dstype t74 = t21+t60+t69+t73;
		f_udg[0*ng+i] = 0.0;
		f_udg[1*ng+i] = t68-t2*t12;
		f_udg[2*ng+i] = t38;
		f_udg[3*ng+i] = t53*udg5-t74*udg2;
		f_udg[4*ng+i] = 0.0;
		f_udg[5*ng+i] = t26+t10*t12*udg2;
		f_udg[6*ng+i] = 0.0;
		f_udg[7*ng+i] = 0.0;
		f_udg[8*ng+i] = t38;
		f_udg[9*ng+i] = t68-t3*t12;
		f_udg[10*ng+i] = t53*udg6-t74*udg3;
		f_udg[11*ng+i] = t25+t9*t12*udg3;
		f_udg[12*ng+i] = 0.0;
		f_udg[13*ng+i] = 0.0;
		f_udg[14*ng+i] = 1.0;
		f_udg[15*ng+i] = t17*2.0+t47;
		f_udg[16*ng+i] = t18;
		f_udg[17*ng+i] = t19+t59+t72-t4*t11-t2*t7*t12;
		f_udg[18*ng+i] = 0.0;
		f_udg[19*ng+i] = t22;
		f_udg[20*ng+i] = 0.0;
		f_udg[21*ng+i] = 0.0;
		f_udg[22*ng+i] = t18;
		f_udg[23*ng+i] = t47;
		f_udg[24*ng+i] = t62;
		f_udg[25*ng+i] = t10*t11;
		f_udg[26*ng+i] = 0.0;
		f_udg[27*ng+i] = 0.0;
		f_udg[28*ng+i] = 0.0;
		f_udg[29*ng+i] = t48;
		f_udg[30*ng+i] = t17;
		f_udg[31*ng+i] = t62;
		f_udg[32*ng+i] = 0.0;
		f_udg[33*ng+i] = t9*t11;
		f_udg[34*ng+i] = 0.0;
		f_udg[35*ng+i] = 1.0;
		f_udg[36*ng+i] = t17;
		f_udg[37*ng+i] = t18*2.0+t48;
		f_udg[38*ng+i] = t19+t59+t72-t5*t11-t3*t7*t12;
		f_udg[39*ng+i] = t20;
		f_udg[40*ng+i] = 0.0;
		f_udg[41*ng+i] = 0.0;
		f_udg[42*ng+i] = 0.0;
		f_udg[43*ng+i] = t7;
		f_udg[44*ng+i] = 0.0;
		f_udg[45*ng+i] = t52*udg2;
		f_udg[46*ng+i] = 0.0;
		f_udg[47*ng+i] = 0.0;
		f_udg[48*ng+i] = 0.0;
		f_udg[49*ng+i] = 0.0;
		f_udg[50*ng+i] = 0.0;
		f_udg[51*ng+i] = t7;
		f_udg[52*ng+i] = t52*udg3;
		f_udg[53*ng+i] = 0.0;
		f_udg[54*ng+i] = 0.0;
		f_udg[55*ng+i] = 0.0;
		f_udg[56*ng+i] = 0.0;
		f_udg[57*ng+i] = t9+t34;
		f_udg[58*ng+i] = t10;
		f_udg[59*ng+i] = udg7+t10*t18-t17*udg5*2.0+t57*udg2;
		f_udg[60*ng+i] = 0.0;
		f_udg[61*ng+i] = -t18;
		f_udg[62*ng+i] = 1.0;
		f_udg[63*ng+i] = 0.0;
		f_udg[64*ng+i] = t10;
		f_udg[65*ng+i] = t34+udg5;
		f_udg[66*ng+i] = t10*t17+t57*udg3;
		f_udg[67*ng+i] = t18;
		f_udg[68*ng+i] = 0.0;
		f_udg[69*ng+i] = 0.0;
		f_udg[70*ng+i] = 0.0;
		f_udg[71*ng+i] = t35+udg6;
		f_udg[72*ng+i] = t9;
		f_udg[73*ng+i] = t9*t18+t58*udg2;
		f_udg[74*ng+i] = 0.0;
		f_udg[75*ng+i] = t17;
		f_udg[76*ng+i] = 0.0;
		f_udg[77*ng+i] = 0.0;
		f_udg[78*ng+i] = t9;
		f_udg[79*ng+i] = t10+t35;
		f_udg[80*ng+i] = udg7+t9*t17-t18*udg6*2.0+t58*udg3;
		f_udg[81*ng+i] = -t17;
		f_udg[82*ng+i] = 0.0;
		f_udg[83*ng+i] = 1.0;
		f_udg[84*ng+i] = 0.0;
		f_udg[85*ng+i] = t36;
		f_udg[86*ng+i] = 0.0;
		f_udg[87*ng+i] = udg5+t17*t36;
		f_udg[88*ng+i] = 1.0;
		f_udg[89*ng+i] = 0.0;
		f_udg[90*ng+i] = 0.0;
		f_udg[91*ng+i] = 0.0;
		f_udg[92*ng+i] = 0.0;
		f_udg[93*ng+i] = t36;
		f_udg[94*ng+i] = udg6+t18*t36;
		f_udg[95*ng+i] = 0.0;
		f_udg[96*ng+i] = 1.0;
		f_udg[97*ng+i] = 0.0;
		}
	});
}

