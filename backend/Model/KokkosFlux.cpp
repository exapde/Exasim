void KokkosFlux(dstype* f, const dstype* xdg, const dstype* udg, const dstype* odg, const dstype* wdg, const dstype* uinf, const dstype* param, const dstype time, const int modelnumber, const int ng, const int nc, const int ncu, const int nd, const int ncx, const int nco, const int ncw)
{
	Kokkos::parallel_for("Flux", ng, KOKKOS_LAMBDA(const size_t i) {
		dstype param1 = param[0];
		dstype udg1 = udg[0*ng+i];
		dstype udg2 = udg[1*ng+i];
		dstype udg3 = udg[2*ng+i];
		dstype udg4 = udg[3*ng+i];
		dstype udg5 = udg[4*ng+i];
		dstype udg6 = udg[5*ng+i];
		dstype udg7 = udg[6*ng+i];
		dstype t2 = udg5*udg6;
		dstype t3 = udg2*udg2;
		dstype t4 = udg3*udg3;
		dstype t5 = udg5*udg5;
		dstype t6 = udg6*udg6;
		dstype t7 = udg7*udg7;
		dstype t8 = param1-1.0;
		dstype t9 = -udg4;
		dstype t10 = 1.0/udg1;
		dstype t11 = t10*t10;
		dstype t12 = -t2;
		dstype t13 = t10*udg4;
		dstype t14 = t10*udg2*udg3;
		dstype t15 = t10*udg2*udg5;
		dstype t16 = t10*udg2*udg6;
		dstype t17 = t10*udg3*udg5;
		dstype t18 = t10*udg3*udg6;
		dstype t19 = t5/2.0;
		dstype t20 = t6/2.0;
		dstype t21 = t7/2.0;
		dstype t22 = (t3*t11)/2.0;
		dstype t23 = (t4*t11)/2.0;
		dstype t24 = t12+t14;
		dstype t25 = t15+t18;
		dstype t26 = t19+t20;
		dstype t27 = t10*t26;
		dstype t28 = t22+t23;
		dstype t29 = t28*udg1;
		dstype t30 = t9+t21+t26+t29;
		dstype t31 = t8*t30;
		dstype t32 = -t31;
		dstype t34 = t10*t32;
		dstype t35 = t13+t27+t34;
		f[0*ng+i] = udg2;
		f[1*ng+i] = -t19+t20+t32+t3*t10;
		f[2*ng+i] = t24;
		f[3*ng+i] = -t25*udg5+t35*udg2+udg5*udg7;
		f[4*ng+i] = udg7;
		f[5*ng+i] = t16-t17;
		f[6*ng+i] = udg5;
		f[7*ng+i] = udg3;
		f[8*ng+i] = t24;
		f[9*ng+i] = t19-t20+t32+t4*t10;
		f[10*ng+i] = -t25*udg6+t35*udg3+udg6*udg7;
		f[11*ng+i] = -t16+t17;
		f[12*ng+i] = udg7;
		f[13*ng+i] = udg6;
	});
}

