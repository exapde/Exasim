void KokkosFlux(dstype* f, const dstype* xdg, const dstype* udg, const dstype* odg, const dstype* wdg, const dstype* uinf, const dstype* param, const dstype time, const int modelnumber, const int ng, const int nc, const int ncu, const int nd, const int ncx, const int nco, const int ncw)
{
	Kokkos::parallel_for("Flux", ng, KOKKOS_LAMBDA(const size_t i) {
		dstype param1 = param[0];
		dstype param2 = param[1];
		dstype param3 = param[2];
		dstype param4 = param[3];
		dstype param10 = param[9];
		dstype param12 = param[11];
		dstype param13 = param[12];
		dstype udg1 = udg[0*ng+i];
		dstype udg2 = udg[1*ng+i];
		dstype udg3 = udg[2*ng+i];
		dstype udg4 = udg[3*ng+i];
		dstype udg5 = udg[4*ng+i];
		dstype udg6 = udg[5*ng+i];
		dstype udg7 = udg[6*ng+i];
		dstype udg8 = udg[7*ng+i];
		dstype udg9 = udg[8*ng+i];
		dstype udg10 = udg[9*ng+i];
		dstype udg11 = udg[10*ng+i];
		dstype udg12 = udg[11*ng+i];
		dstype odg1 = odg[0*ng+i];
		dstype t2 = 1.0/3.141592653589793;
		dstype t3 = udg1*1.0E3;
		dstype t4 = t3-1.0E1;
		dstype t5 = atan(t4);
		dstype t6 = t2*t5;
		dstype t7 = t6+1.0/2.0;
		dstype t8 = udg1-1.0/1.0E2;
		dstype t9 = t7*t8*1.0E3;
		dstype t10 = t9+3.183097800805168E-1;
		dstype t12 = t7*t8;
		dstype t11 = t12+3.183097800805168E-4;
		dstype t13 = t12+1.031830978008052E-2;
		dstype t14 = 1.0/(t13*t13);
		dstype t15 = udg2*udg2;
		dstype t16 = t14*t15*(1.0/2.0);
		dstype t17 = udg3*udg3;
		dstype t18 = t14*t17*(1.0/2.0);
		dstype t19 = t16+t18;
		dstype t33 = t13*t19;
		dstype t20 = -t33+udg4;
		dstype t21 = param1-1.0;
		dstype t22 = odg1*param13;
		dstype t23 = tanh(t22);
		dstype t24 = 1.0/t13;
		dstype t25 = atan(t10);
		dstype t26 = t2*t25;
		dstype t27 = t11*t11;
		dstype t28 = t27*1.0E6;
		dstype t29 = t28+1.0;
		dstype t30 = 1.0/t29;
		dstype t31 = t2*t10*t30;
		dstype t32 = t26+t31+1.0/2.0;
		dstype t34 = t20*t21*1.0E3;
		dstype t35 = t34-1.0;
		dstype t36 = atan(t35);
		dstype t37 = t2*t36;
		dstype t38 = t37+1.0/2.0;
		dstype t39 = t20*t21;
		dstype t40 = t39-1.0/1.0E3;
		dstype t41 = t38*t40;
		dstype t42 = param4*param4;
		dstype t43 = t41+1.318309780080517E-3;
		dstype t44 = 1.0/param2;
		dstype t45 = param1*param10*t24*t42*t43;
		dstype t46 = t45+5.52E2/5.0;
		dstype t47 = 1.0/t46;
		dstype t48 = param10+5.52E2/5.0;
		dstype t49 = param1*t24*t42*t43;
		dstype t50 = pow(t49,3.0/2.0);
		dstype t64 = t24*t32*udg3*udg5;
		dstype t51 = -t64+udg7;
		dstype t52 = t24*t51;
		dstype t66 = t24*t32*udg2*udg9;
		dstype t53 = -t66+udg10;
		dstype t54 = t24*t53;
		dstype t55 = t52+t54;
		dstype t63 = t24*t32*udg2*udg5;
		dstype t56 = -t63+udg6;
		dstype t57 = t24*t56*2.0;
		dstype t68 = t24*t32*udg3*udg9;
		dstype t58 = -t68+udg11;
		dstype t59 = t57-t24*t58;
		dstype t60 = t41+3.183097800805168E-4;
		dstype t61 = t38*t40*1.0E3;
		dstype t62 = t61+3.183097800805168E-1;
		dstype t65 = t24*udg2*udg3;
		dstype t67 = t44*t47*t48*t50*t55;
		dstype t69 = t24*udg4;
		dstype t70 = t24*t43;
		dstype t71 = t69+t70;
		dstype t72 = t24*t56;
		dstype t73 = t72-t24*t58*2.0;
		dstype t74 = 1.0/param3;
		dstype t75 = atan(t62);
		dstype t76 = t2*t75;
		dstype t77 = t60*t60;
		dstype t78 = t77*1.0E6;
		dstype t79 = t78+1.0;
		dstype t80 = 1.0/t79;
		dstype t81 = t2*t62*t80;
		dstype t82 = t76+t81+1.0/2.0;
		dstype t83 = 1.0/t21;
		f[0*ng+i] = udg2+param12*t23*t32*udg5;
		f[1*ng+i] = t41+t15*t24+param12*t23*udg6+t44*t47*t48*t50*t59*(2.0/3.0)+1.318309780080517E-3;
		f[2*ng+i] = t65+t67+param12*t23*udg7;
		f[3*ng+i] = t71*udg2+param12*t23*udg8+t24*t44*t47*t48*t50*t55*udg3+t24*t44*t47*t48*t50*t59*udg2*(2.0/3.0)-param1*t14*t44*t47*t48*t50*t74*t83*(t32*t43*udg5+t13*t21*t82*(-udg8+t13*(t14*t51*udg3+t14*t56*udg2)+t19*t32*udg5));
		f[4*ng+i] = udg3+param12*t23*t32*udg9;
		f[5*ng+i] = t65+t67+param12*t23*udg10;
		f[6*ng+i] = t41+t17*t24+param12*t23*udg11-t44*t47*t48*t50*t73*(2.0/3.0)+1.318309780080517E-3;
		f[7*ng+i] = t71*udg3+param12*t23*udg12+t24*t44*t47*t48*t50*t55*udg2-t24*t44*t47*t48*t50*t73*udg3*(2.0/3.0)-param1*t14*t44*t47*t48*t50*t74*t83*(t32*t43*udg9+t13*t21*t82*(-udg12+t13*(t14*t53*udg2+t14*t58*udg3)+t19*t32*udg9));
	});
}

