void HdgFbou1(dstype* f, dstype* f_udg, dstype* f_wdg, dstype* f_uhg, const dstype* xdg, const dstype* udg, const dstype* odg, const dstype* wdg, const dstype* uhg, const dstype* nlg, const dstype* tau, const dstype* uinf, const dstype* param, const dstype time, const int modelnumber, const int ng, const int nc, const int ncu, const int nd, const int ncx, const int nco, const int ncw)
{
	Kokkos::parallel_for("Fbou1", ng, KOKKOS_LAMBDA(const size_t i) {
		dstype param1 = param[0];
		dstype tau1 = tau[0];
		dstype udg1 = udg[0*ng+i];
		dstype udg2 = udg[1*ng+i];
		dstype udg3 = udg[2*ng+i];
		dstype udg4 = udg[3*ng+i];
		dstype udg5 = udg[4*ng+i];
		dstype udg6 = udg[5*ng+i];
		dstype udg7 = udg[6*ng+i];
		dstype uhg1 = uhg[0*ng+i];
		dstype uhg2 = uhg[1*ng+i];
		dstype uhg3 = uhg[2*ng+i];
		dstype uhg4 = uhg[3*ng+i];
		dstype uhg5 = uhg[4*ng+i];
		dstype uhg6 = uhg[5*ng+i];
		dstype uhg7 = uhg[6*ng+i];
		dstype nlg1 = nlg[0*ng+i];
		dstype nlg2 = nlg[1*ng+i];
		{
		dstype t2 = udg5*udg6;
		dstype t3 = udg2*udg2;
		dstype t4 = udg3*udg3;
		dstype t5 = udg5*udg5;
		dstype t6 = udg6*udg6;
		dstype t7 = udg7*udg7;
		dstype t8 = param1-1.0;
		dstype t9 = -udg4;
		dstype t10 = 1.0/udg1;
		dstype t11 = t10*t10;
		dstype t12 = t10*udg4;
		dstype t13 = t10*udg2*udg3;
		dstype t14 = t10*udg2*udg5;
		dstype t15 = t10*udg2*udg6;
		dstype t16 = t10*udg3*udg5;
		dstype t17 = t10*udg3*udg6;
		dstype t18 = t5/2.0;
		dstype t19 = t6/2.0;
		dstype t20 = t7/2.0;
		dstype t21 = -t13;
		dstype t22 = -t16;
		dstype t23 = (t3*t11)/2.0;
		dstype t24 = (t4*t11)/2.0;
		dstype t26 = t14+t17;
		dstype t27 = t18+t19;
		dstype t25 = t2+t21;
		dstype t28 = t15+t22;
		dstype t29 = t10*t27;
		dstype t30 = t23+t24;
		dstype t31 = t30*udg1;
		dstype t32 = t9+t20+t27+t31;
		dstype t33 = t8*t32;
		dstype t34 = -t33;
		dstype t36 = t10*t34;
		dstype t37 = t12+t29+t36;
		f[0*ng+i] = nlg1*udg2+nlg2*udg3+tau1*(udg1-uhg1);
		f[1*ng+i] = -nlg1*(t18-t19+t33-t3*t10)-nlg2*t25+tau1*(udg2-uhg2);
		f[2*ng+i] = nlg2*(t18-t19+t34+t4*t10)-nlg1*t25+tau1*(udg3-uhg3);
		f[3*ng+i] = nlg1*(-t26*udg5+t37*udg2+udg5*udg7)+nlg2*(-t26*udg6+t37*udg3+udg6*udg7)+tau1*(udg4-uhg4);
		f[4*ng+i] = -nlg2*t28+nlg1*udg7+tau1*(udg5-uhg5);
		f[5*ng+i] = nlg1*t28+nlg2*udg7+tau1*(udg6-uhg6);
		f[6*ng+i] = nlg1*udg5+nlg2*udg6+tau1*(udg7-uhg7);
		}
		{
		dstype t2 = udg2*udg2;
		dstype t3 = udg3*udg3;
		dstype t4 = udg5*udg5;
		dstype t5 = udg6*udg6;
		dstype t6 = udg7*udg7;
		dstype t7 = param1-1.0;
		dstype t8 = -udg4;
		dstype t9 = 1.0/udg1;
		dstype t10 = t9*t9;
		dstype t11 = t9*t9*t9;
		dstype t12 = t7*udg5;
		dstype t13 = t7*udg6;
		dstype t15 = t9*udg5;
		dstype t17 = t9*udg6;
		dstype t18 = nlg1*t9*udg2;
		dstype t19 = nlg1*t9*udg3;
		dstype t20 = nlg2*t9*udg2;
		dstype t21 = nlg2*t9*udg3;
		dstype t27 = t4/2.0;
		dstype t28 = t5/2.0;
		dstype t29 = t6/2.0;
		dstype t32 = t8*t9;
		dstype t33 = t7*t9;
		dstype t16 = t10*udg4;
		dstype t22 = t10*udg2*udg5;
		dstype t23 = t10*udg2*udg6;
		dstype t24 = t10*udg3*udg5;
		dstype t25 = t10*udg3*udg6;
		dstype t26 = t15*udg6;
		dstype t30 = t2*t11;
		dstype t31 = t3*t11;
		dstype t35 = t9*t12;
		dstype t36 = t9*t13;
		dstype t37 = (t2*t10)/2.0;
		dstype t38 = (t3*t10)/2.0;
		dstype t39 = t7*t10*udg2*udg3;
		dstype t42 = t9+t33;
		dstype t44 = t27+t28;
		dstype t34 = -t24;
		dstype t40 = -t35;
		dstype t41 = -t36;
		dstype t43 = t22+t25;
		dstype t45 = t30+t31;
		dstype t48 = t26+t39;
		dstype t51 = t9*t44;
		dstype t52 = t10*t44;
		dstype t55 = t37+t38;
		dstype t46 = t23+t34;
		dstype t47 = t45*udg1;
		dstype t49 = t15+t40;
		dstype t50 = t17+t41;
		dstype t54 = -t51;
		dstype t56 = t55*udg1;
		dstype t53 = -t47;
		dstype t59 = t8+t29+t44+t56;
		dstype t57 = t53+t55;
		dstype t61 = t33*t59;
		dstype t62 = t7*t10*t59;
		dstype t58 = t7*t57;
		dstype t60 = t33*t57;
		dstype t63 = -t62;
		dstype t64 = t16+t52+t60+t63;
		f_udg[0*ng+i] = tau1;
		f_udg[1*ng+i] = -nlg1*(t58+t2*t10)-nlg2*t10*udg2*udg3;
		f_udg[2*ng+i] = -nlg2*(t58+t3*t10)-nlg1*t10*udg2*udg3;
		f_udg[3*ng+i] = nlg1*(t43*udg5-t64*udg2)+nlg2*(t43*udg6-t64*udg3);
		f_udg[4*ng+i] = nlg2*t46;
		f_udg[5*ng+i] = -nlg1*t46;
		f_udg[6*ng+i] = 0.0;
		f_udg[7*ng+i] = nlg1;
		f_udg[8*ng+i] = t21+tau1+nlg1*(t9*udg2*2.0-t33*udg2);
		f_udg[9*ng+i] = t19-t7*t20;
		f_udg[10*ng+i] = -nlg2*t48-nlg1*(t32+t54+t61+t4*t9+t2*t7*t10);
		f_udg[11*ng+i] = -nlg2*t17;
		f_udg[12*ng+i] = nlg1*t17;
		f_udg[13*ng+i] = 0.0;
		f_udg[14*ng+i] = nlg2;
		f_udg[15*ng+i] = t20-t7*t19;
		f_udg[16*ng+i] = t18+tau1+nlg2*(t9*udg3*2.0-t33*udg3);
		f_udg[17*ng+i] = -nlg1*t48-nlg2*(t32+t54+t61+t5*t9+t3*t7*t10);
		f_udg[18*ng+i] = nlg2*t15;
		f_udg[19*ng+i] = -nlg1*t15;
		f_udg[20*ng+i] = 0.0;
		f_udg[21*ng+i] = 0.0;
		f_udg[22*ng+i] = nlg1*t7;
		f_udg[23*ng+i] = nlg2*t7;
		f_udg[24*ng+i] = tau1+nlg1*t42*udg2+nlg2*t42*udg3;
		f_udg[25*ng+i] = 0.0;
		f_udg[26*ng+i] = 0.0;
		f_udg[27*ng+i] = 0.0;
		f_udg[28*ng+i] = 0.0;
		f_udg[29*ng+i] = -nlg1*(t12+udg5)-nlg2*udg6;
		f_udg[30*ng+i] = -nlg1*udg6-nlg2*(t12-udg5);
		f_udg[31*ng+i] = nlg1*(udg7-t15*udg2*2.0-t17*udg3+t49*udg2)-nlg2*(t17*udg2-t49*udg3);
		f_udg[32*ng+i] = t21+tau1;
		f_udg[33*ng+i] = -t19;
		f_udg[34*ng+i] = nlg1;
		f_udg[35*ng+i] = 0.0;
		f_udg[36*ng+i] = -nlg2*udg5-nlg1*(t13-udg6);
		f_udg[37*ng+i] = -nlg2*(t13+udg6)-nlg1*udg5;
		f_udg[38*ng+i] = nlg2*(udg7-t15*udg2-t17*udg3*2.0+t50*udg3)-nlg1*(t15*udg3-t50*udg2);
		f_udg[39*ng+i] = -t20;
		f_udg[40*ng+i] = t18+tau1;
		f_udg[41*ng+i] = nlg2;
		f_udg[42*ng+i] = 0.0;
		f_udg[43*ng+i] = -nlg1*t7*udg7;
		f_udg[44*ng+i] = -nlg2*t7*udg7;
		f_udg[45*ng+i] = nlg1*(udg5-t33*udg2*udg7)+nlg2*(udg6-t33*udg3*udg7);
		f_udg[46*ng+i] = nlg1;
		f_udg[47*ng+i] = nlg2;
		f_udg[48*ng+i] = tau1;
		}
		{
		dstype t2 = -tau1;
		f_uhg[0*ng+i] = t2;
		f_uhg[1*ng+i] = 0.0;
		f_uhg[2*ng+i] = 0.0;
		f_uhg[3*ng+i] = 0.0;
		f_uhg[4*ng+i] = 0.0;
		f_uhg[5*ng+i] = 0.0;
		f_uhg[6*ng+i] = 0.0;
		f_uhg[7*ng+i] = 0.0;
		f_uhg[8*ng+i] = t2;
		f_uhg[9*ng+i] = 0.0;
		f_uhg[10*ng+i] = 0.0;
		f_uhg[11*ng+i] = 0.0;
		f_uhg[12*ng+i] = 0.0;
		f_uhg[13*ng+i] = 0.0;
		f_uhg[14*ng+i] = 0.0;
		f_uhg[15*ng+i] = 0.0;
		f_uhg[16*ng+i] = t2;
		f_uhg[17*ng+i] = 0.0;
		f_uhg[18*ng+i] = 0.0;
		f_uhg[19*ng+i] = 0.0;
		f_uhg[20*ng+i] = 0.0;
		f_uhg[21*ng+i] = 0.0;
		f_uhg[22*ng+i] = 0.0;
		f_uhg[23*ng+i] = 0.0;
		f_uhg[24*ng+i] = t2;
		f_uhg[25*ng+i] = 0.0;
		f_uhg[26*ng+i] = 0.0;
		f_uhg[27*ng+i] = 0.0;
		f_uhg[28*ng+i] = 0.0;
		f_uhg[29*ng+i] = 0.0;
		f_uhg[30*ng+i] = 0.0;
		f_uhg[31*ng+i] = 0.0;
		f_uhg[32*ng+i] = t2;
		f_uhg[33*ng+i] = 0.0;
		f_uhg[34*ng+i] = 0.0;
		f_uhg[35*ng+i] = 0.0;
		f_uhg[36*ng+i] = 0.0;
		f_uhg[37*ng+i] = 0.0;
		f_uhg[38*ng+i] = 0.0;
		f_uhg[39*ng+i] = 0.0;
		f_uhg[40*ng+i] = t2;
		f_uhg[41*ng+i] = 0.0;
		f_uhg[42*ng+i] = 0.0;
		f_uhg[43*ng+i] = 0.0;
		f_uhg[44*ng+i] = 0.0;
		f_uhg[45*ng+i] = 0.0;
		f_uhg[46*ng+i] = 0.0;
		f_uhg[47*ng+i] = 0.0;
		f_uhg[48*ng+i] = t2;
		}
	});
}

void HdgFbou(dstype* f, dstype* f_udg, dstype* f_wdg, dstype* f_uhg, const dstype* xdg, const dstype* udg, const dstype* odg, const dstype* wdg, const dstype* uhg, const dstype* nlg, const dstype* tau, const dstype* uinf, const dstype* param, const dstype time, const int modelnumber, const int ib, const int ng, const int nc, const int ncu, const int nd, const int ncx, const int nco, const int ncw)
{
	if (ib == 1)
		HdgFbou1(f, f_udg, f_wdg, f_uhg, xdg, udg, odg, wdg, uhg, nlg, tau, uinf, param, time, modelnumber, ng, nc, ncu, nd, ncx, nco, ncw);
}

