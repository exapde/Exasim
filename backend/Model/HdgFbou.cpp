void HdgFbou1(dstype* f, dstype* J1, dstype* J2, dstype* J3, const dstype* x, const dstype* uq, const dstype* v, const dstype* w, const dstype* uhat, const dstype* n, const dstype* tau, const dstype* eta, const dstype* mu, const dstype t, const int modelnumber, const int N, const int szx, const int szuq, const int szv, const int szw, const int szuhat, const int szn, const int sztau, const int szeta, const int szmu)
{

  Kokkos::parallel_for("FbouHdg", N, KOKKOS_LAMBDA(const size_t i) {
    dstype uq0 = uq[0*N+i];
    dstype uq1 = uq[1*N+i];
    dstype uq2 = uq[2*N+i];
    dstype uq3 = uq[3*N+i];
    dstype uq4 = uq[4*N+i];
    dstype uq5 = uq[5*N+i];
    dstype uq6 = uq[6*N+i];
    dstype uq7 = uq[7*N+i];
    dstype uq8 = uq[8*N+i];
    dstype uq9 = uq[9*N+i];
    dstype uq10 = uq[10*N+i];
    dstype uq11 = uq[11*N+i];
    dstype uhat0 = uhat[0*N+i];
    dstype uhat1 = uhat[1*N+i];
    dstype uhat2 = uhat[2*N+i];
    dstype uhat3 = uhat[3*N+i];
    dstype n0 = n[0*N+i];
    dstype n1 = n[1*N+i];
    dstype tau0 = tau[0];
    dstype mu0 = mu[0];
    dstype mu1 = mu[1];
    dstype mu2 = mu[2];
    dstype x0 = -1.0 + mu0;
    dstype x1 = pow(uq2, 2);
    dstype x2 = pow(uq0, -2);
    dstype x3 = x2*x1;
    dstype x4 = pow(uq1, 2);
    dstype x5 = x2*x4;
    dstype x6 = 0.5*(x3 + x5);
    dstype x7 = uq3 - x6*uq0;
    dstype x8 = x0*x7;
    dstype x9 = pow(uq0, -1);
    dstype x10 = uq4*uq2;
    dstype x11 = uq6 - x9*x10;
    dstype x12 = x2*x11;
    dstype x13 = uq2*x12;
    dstype x14 = uq4*uq1;
    dstype x15 = uq5 - x9*x14;
    dstype x16 = x2*x15;
    dstype x17 = uq1*x16;
    dstype x18 = x0*(uq7 - x6*uq4 - (x13 + x17)*uq0);
    dstype x19 = uq0*x18 - x8*uq4;
    dstype x20 = pow(x0, -1);
    dstype x21 = pow(mu1, -1);
    dstype x22 = x2*x21;
    dstype x23 = mu0/mu2;
    dstype x24 = x22*x23;
    dstype x25 = x24*x20;
    dstype x26 = x9*x21;
    dstype x27 = uq2*uq8;
    dstype x28 = uq10 - x9*x27;
    dstype x29 = x9*x28;
    dstype x30 = x9*x15;
    dstype x31 = 0.666666666666667*(-x29 + 2*x30);
    dstype x32 = x31*x26;
    dstype x33 = uq1*uq8;
    dstype x34 = uq9 - x9*x33;
    dstype x35 = (x9*x11 + x9*x34)*x21;
    dstype x36 = x9*x35;
    dstype x37 = x0*x9;
    dstype x38 = x7*x37 + x9*uq3;
    dstype x39 = x2*x28;
    dstype x40 = uq2*x39;
    dstype x41 = x2*x34;
    dstype x42 = uq1*x41;
    dstype x43 = x0*(uq11 - x6*uq8 - (x40 + x42)*uq0);
    dstype x44 = uq0*x43 - x8*uq8;
    dstype x45 = 0.666666666666667*(2*x29 - x30);
    dstype x46 = x45*x26;
    dstype x47 = pow(uq0, -3);
    dstype x48 = x4*x47;
    dstype x49 = x1*x47;
    dstype x50 = 0.5*(-2*x48 - 2*x49);
    dstype x51 = -0.5*x3 - 0.5*x5;
    dstype x52 = x51 - uq0*x50;
    dstype x53 = -x2*uq3 - x2*x8 + x52*x37;
    dstype x54 = uq2*x22;
    dstype x55 = x47*x27;
    dstype x56 = x47*x14;
    dstype x57 = x16 - x56;
    dstype x58 = 0.666666666666667*x26;
    dstype x59 = 2*x47;
    dstype x60 = uq1*x59;
    dstype x61 = pow(uq0, -4);
    dstype x62 = x4*x61;
    dstype x63 = uq2*x59;
    dstype x64 = x1*x61;
    dstype x65 = x0*uq0;
    dstype x66 = x0*x52;
    dstype x67 = x2*x35;
    dstype x68 = x47*x33;
    dstype x69 = x47*x10;
    dstype x70 = (-x12 - x41 + x68 + x69)*x26;
    dstype x71 = x59*x23*x20*x21;
    dstype x72 = x39 - x55;
    dstype x73 = uq1*x22;
    dstype x74 = x69*x21;
    dstype x75 = x68*x21;
    dstype x76 = 1.0*x2;
    dstype x77 = 1.0*x37;
    dstype x78 = 1.0*x0;
    dstype x79 = uq2*uq1;
    dstype x80 = x36 - x2*x79*x78;
    dstype x81 = x56*x21;
    dstype x82 = x55*x21;
    dstype x83 = x37 + x9;
    dstype x84 = 0.333333333333333*x79*x47*x21;
    dstype x85 = x49*x21;
    dstype x86 = x48*x21;
    dstype x87 = x25*(-x8 + x65*(x51 - (-x48 - x49)*uq0));
    dstype x88 = -x73*x23;
    dstype x89 = -x54*x23;
    dstype x90 = x23*x26;

    f[0 * N + i] = -uhat0 + uq0;
    f[1 * N + i] = -uhat1;
    f[2 * N + i] = -uhat2;
    f[3 * N + i] = n0*(uq1*x32 + uq1*x38 + uq2*x36 + x25*x19) + n1*(uq1*x36 + uq2*x38 + uq2*x46 + x44*x25) + tau0*(-uhat3 + uq3);
    J1[0 * N + i] = 1;
    J1[1 * N + i] = 0;
    J1[2 * N + i] = 0;
    J1[3 * N + i] = n0*(uq1*x53 - uq2*x67 + uq2*x70 + x25*(x18 - uq4*x66 + x65*(-x13 - x17 - uq4*x50 - (uq4*x62 + uq4*x64 - x60*x15 - x63*x11)*uq0)) - x71*x19 - x73*x31 + uq1*x58*(-2*x16 + 2*x56 + x72)) + n1*(-uq1*x67 + uq1*x70 + uq2*x53 + x25*(x43 - uq8*x66 + x65*(-x40 - x42 - uq8*x50 - (uq8*x62 + uq8*x64 - x60*x34 - x63*x28)*uq0)) - x54*x45 - x71*x44 + uq2*x58*(-2*x39 + 2*x55 + x57));
    J1[4 * N + i] = 0;
    J1[5 * N + i] = 0;
    J1[6 * N + i] = 0;
    J1[7 * N + i] = n0*(x32 + x38 - 1.33333333333333*x81 - x82 + x25*(x65*(-uq0*x57 - x76*x14) + x77*x14) - x5*x78) + n1*(0.666666666666667*x74 - x75 + x80 + x25*(x65*(-x76*x33 - (x41 - x68)*uq0) + x77*x33));
    J1[8 * N + i] = 0;
    J1[9 * N + i] = 0;
    J1[10 * N + i] = 0;
    J1[11 * N + i] = n0*(-x74 + 0.666666666666667*x75 + x80 + x25*(x65*(-x76*x10 - (x12 - x69)*uq0) + x77*x10)) + n1*(x38 + x46 - x81 - 1.33333333333333*x82 + x25*(x65*(-uq0*x72 - x76*x27) + x77*x27) - x3*x78);
    J1[12 * N + i] = 0;
    J1[13 * N + i] = 0;
    J1[14 * N + i] = 0;
    J1[15 * N + i] = tau0 + n0*(uq1*x83 - uq4*x24) + n1*(uq2*x83 - uq8*x24);
    J1[16 * N + i] = 0;
    J1[17 * N + i] = 0;
    J1[18 * N + i] = 0;
    J1[19 * N + i] = n0*(-x85 - 1.33333333333333*x86 + x87) - n1*x84;
    J1[20 * N + i] = 0;
    J1[21 * N + i] = 0;
    J1[22 * N + i] = 0;
    J1[23 * N + i] = n0*(1.33333333333333*x73 + x88) - 0.666666666666667*n1*x54;
    J1[24 * N + i] = 0;
    J1[25 * N + i] = 0;
    J1[26 * N + i] = 0;
    J1[27 * N + i] = n1*x73 + (x54 + x89)*n0;
    J1[28 * N + i] = 0;
    J1[29 * N + i] = 0;
    J1[30 * N + i] = 0;
    J1[31 * N + i] = n0*x90;
    J1[32 * N + i] = 0;
    J1[33 * N + i] = 0;
    J1[34 * N + i] = 0;
    J1[35 * N + i] = -n0*x84 + n1*(-1.33333333333333*x85 - x86 + x87);
    J1[36 * N + i] = 0;
    J1[37 * N + i] = 0;
    J1[38 * N + i] = 0;
    J1[39 * N + i] = n0*x54 + (x73 + x88)*n1;
    J1[40 * N + i] = 0;
    J1[41 * N + i] = 0;
    J1[42 * N + i] = 0;
    J1[43 * N + i] = -0.666666666666667*n0*x73 + n1*(1.33333333333333*x54 + x89);
    J1[44 * N + i] = 0;
    J1[45 * N + i] = 0;
    J1[46 * N + i] = 0;
    J1[47 * N + i] = n1*x90;
    J3[0 * N + i] = -1;
    J3[1 * N + i] = 0;
    J3[2 * N + i] = 0;
    J3[3 * N + i] = 0;
    J3[4 * N + i] = 0;
    J3[5 * N + i] = -1;
    J3[6 * N + i] = 0;
    J3[7 * N + i] = 0;
    J3[8 * N + i] = 0;
    J3[9 * N + i] = 0;
    J3[10 * N + i] = -1;
    J3[11 * N + i] = 0;
    J3[12 * N + i] = 0;
    J3[13 * N + i] = 0;
    J3[14 * N + i] = 0;
    J3[15 * N + i] = -tau0;
  });
}

void HdgFbou2(dstype* f, dstype* J1, dstype* J2, dstype* J3, const dstype* x, const dstype* uq, const dstype* v, const dstype* w, const dstype* uhat, const dstype* n, const dstype* tau, const dstype* eta, const dstype* mu, const dstype t, const int modelnumber, const int N, const int szx, const int szuq, const int szv, const int szw, const int szuhat, const int szn, const int sztau, const int szeta, const int szmu)
{

  Kokkos::parallel_for("FbouHdg", N, KOKKOS_LAMBDA(const size_t i) {
    dstype uq0 = uq[0*N+i];
    dstype uq1 = uq[1*N+i];
    dstype uq2 = uq[2*N+i];
    dstype uq3 = uq[3*N+i];
    dstype uhat0 = uhat[0*N+i];
    dstype uhat1 = uhat[1*N+i];
    dstype uhat2 = uhat[2*N+i];
    dstype uhat3 = uhat[3*N+i];
    dstype n0 = n[0*N+i];
    dstype n1 = n[1*N+i];
    dstype mu0 = mu[0];
    dstype mu4 = mu[4];
    dstype mu5 = mu[5];
    dstype mu6 = mu[6];
    dstype mu7 = mu[7];
    dstype x0 = -mu5 + uq1;
    dstype x1 = pow(uhat0, -2);
    dstype x2 = pow(uhat2, 2);
    dstype x3 = x2*x1;
    dstype x4 = pow(uhat1, 2);
    dstype x5 = x1*x4;
    dstype x6 = 0.5*uhat0;
    dstype x7 = uhat3 - (x3 + x5)*x6;
    dstype x8 = pow(uhat0, -1);
    dstype x9 = -1.0 + mu0;
    dstype x10 = x8*x9;
    dstype x11 = x7*x10;
    dstype x12 = sqrt(x11*mu0);
    dstype x13 = n1*uhat2;
    dstype x14 = n0*uhat1;
    dstype x15 = x13 + x14;
    dstype x16 = x8*x15;
    dstype x17 = x12 + x16;
    dstype x18 = tanh(100*x17);
    dstype x19 = n0*uhat2;
    dstype x20 = n1*uhat1;
    dstype x21 = x19 - x20;
    dstype x22 = x12*x16;
    dstype x23 = x11 + x8*uhat3;
    dstype x24 = -x22 + x23;
    dstype x25 = -x24;
    dstype x26 = pow(x21, 2);
    dstype x27 = x1*x26;
    dstype x28 = pow(x15, 2);
    dstype x29 = x27 + x1*x28;
    dstype x30 = 0.5*x29;
    dstype x31 = x25 + x30;
    dstype x32 = -x12 + x16;
    dstype x33 = -x32;
    dstype x34 = x16 + x33;
    dstype x35 = pow(x34, -1);
    dstype x36 = x17 + x33;
    dstype x37 = x36*x35;
    dstype x38 = x31*x37;
    dstype x39 = x22 + x23;
    dstype x40 = x25 - x38 + x39;
    dstype x41 = pow(x40, -1);
    dstype x42 = n1*x8;
    dstype x43 = x41*x42;
    dstype x44 = x43*x21;
    dstype x45 = x41*x35;
    dstype x46 = x45*x31;
    dstype x47 = x44 - n0*x46;
    dstype x48 = x47*x18;
    dstype x49 = tanh(100*x16);
    dstype x50 = 1 + x41*x38;
    dstype x51 = x50*x35;
    dstype x52 = x41*x37;
    dstype x53 = x42*x21;
    dstype x54 = n0*x51 - x53*x52;
    dstype x55 = x54*x49;
    dstype x56 = tanh(100*x32);
    dstype x57 = x8*x41;
    dstype x58 = x57*x21;
    dstype x59 = x8*x21;
    dstype x60 = x58 - x52*x59;
    dstype x61 = x46 - x51;
    dstype x62 = n0*x61 - n1*x60;
    dstype x63 = x62*x56;
    dstype x64 = -mu6 + uq2;
    dstype x65 = n0*x8;
    dstype x66 = x65*x41;
    dstype x67 = x66*x21;
    dstype x68 = -x67 - n1*x46;
    dstype x69 = x68*x18;
    dstype x70 = x65*x21;
    dstype x71 = n1*x51 + x70*x52;
    dstype x72 = x71*x49;
    dstype x73 = n0*x60 + n1*x61;
    dstype x74 = x73*x56;
    dstype x75 = -mu4 + uq0;
    dstype x76 = x31*x35;
    dstype x77 = x25 + x27 + x76*x32;
    dstype x78 = x77*x41;
    dstype x79 = x33 - x78*x36;
    dstype x80 = x79*x35;
    dstype x81 = x80*x49;
    dstype x82 = x78*x18;
    dstype x83 = 1 - x78 - x80;
    dstype x84 = x83*x56;
    dstype x85 = -mu7 + uq3;
    dstype x86 = x41*x18;
    dstype x87 = x52*x49;
    dstype x88 = -x41 + x52;
    dstype x89 = x88*x56;
    dstype x90 = pow(n0, -1);
    dstype x91 = pow(n1, 2);
    dstype x92 = x91*x90;
    dstype x93 = pow(n0 + x92, -1);
    dstype x94 = x93*x92;
    dstype x95 = 1 - x94;
    dstype x96 = x90*x95;
    dstype x97 = x93*x42;
    dstype x98 = x90*x21;
    dstype x99 = -x98*x97;
    dstype x100 = x99 + x96*x17;
    dstype x101 = x48*x100;
    dstype x102 = x99 + x96*x32;
    dstype x103 = x63*x102;
    dstype x104 = x93*x49;
    dstype x105 = x92*x104;
    dstype x106 = x8*x95;
    dstype x107 = x90*x15;
    dstype x108 = x99 + x107*x106;
    dstype x109 = x55*x108;
    dstype x110 = x86*x100;
    dstype x111 = x89*x102;
    dstype x112 = x81*x108;
    dstype x113 = x42*x104;
    dstype x114 = x98*x113;
    dstype x115 = x84*x102;
    dstype x116 = n1*x104;
    dstype x117 = -x116;
    dstype x118 = x74*x102;
    dstype x119 = x72*x108;
    dstype x120 = n1*x90;
    dstype x121 = x93*x120;
    dstype x122 = x59*x93;
    dstype x123 = x122 + x17*x121;
    dstype x124 = x59*x104;
    dstype x125 = x122 + x97*x107;
    dstype x126 = x122 + x32*x121;
    dstype x127 = x84*x126;
    dstype x128 = x74*x126;
    dstype x129 = n0*x104;
    dstype x130 = x72*x125;
    dstype x131 = x89*x126;
    dstype x132 = x63*x126;
    dstype x133 = x65*x49;
    dstype x134 = x21*x133;
    dstype x135 = x74*x24;
    dstype x136 = x86*x39;
    dstype x137 = x89*x24;
    dstype x138 = x48*x39;
    dstype x139 = x53*x49;
    dstype x140 = x63*x24;
    dstype x141 = x49*x27;
    dstype x142 = 0.5*x84;
    dstype x143 = 0.5*x82;
    dstype x144 = 0.5*x81;
    dstype x145 = 0.25*x29;
    dstype x146 = 0.5*x55;
    dstype x147 = 0.5*x48;
    dstype x148 = -0.5*x116;
    dstype x149 = 0.5*x72;
    dstype x150 = 0.5*x69;
    dstype x151 = 0.5*x87;
    dstype x152 = 0.5*x86;
    dstype x153 = pow(x34, -2);
    dstype x154 = pow(x12, -1);
    dstype x155 = pow(uhat0, -3);
    dstype x156 = 2*x155;
    dstype x157 = x10*(-0.5*x3 - 0.5*x5 - (-x2*x156 - x4*x156)*x6);
    dstype x158 = x1*x9;
    dstype x159 = x7*x158;
    dstype x160 = (mu0*x157 - mu0*x159)*x154;
    dstype x161 = (1.0/2.0)*x160;
    dstype x162 = x161*x153;
    dstype x163 = x50*x162;
    dstype x164 = 1.0*x155;
    dstype x165 = x1*uhat3;
    dstype x166 = x1*x15;
    dstype x167 = x12*x166;
    dstype x168 = x16*x161;
    dstype x169 = -x167 + x168;
    dstype x170 = -x157 + x159 + x165 + x169;
    dstype x171 = x170 - x26*x164 - x28*x164;
    dstype x172 = pow(x40, -2);
    dstype x173 = x31*x162;
    dstype x174 = x172*(-2*x167 + x16*x160 + x36*x173 - x37*x171 - x76*x160);
    dstype x175 = x41*x173;
    dstype x176 = (-x36*x175 - x38*x174 + x46*x160 + x52*x171)*x35;
    dstype x177 = x45*x171;
    dstype x178 = x76*x174;
    dstype x179 = x163 - x175 - x176 + x177 - x178;
    dstype x180 = x1*x21;
    dstype x181 = x52*x180;
    dstype x182 = x45*x160;
    dstype x183 = x59*x174;
    dstype x184 = x36*x162;
    dstype x185 = x41*x180;
    dstype x186 = x181 - x183 - x185 + x37*x183 + x58*x184 - x59*x182;
    dstype x187 = (n0*x179 - n1*x186)*x56;
    dstype x188 = x37*x174;
    dstype x189 = x49*(-n0*x163 + n0*x176 + n1*x181 + x44*x184 - x53*x182 + x53*x188);
    dstype x190 = 1 - pow(x49, 2);
    dstype x191 = 100*x190;
    dstype x192 = x166*x191;
    dstype x193 = x54*x192;
    dstype x194 = -x166;
    dstype x195 = x161 + x194;
    dstype x196 = 1 - pow(x18, 2);
    dstype x197 = 100*x196;
    dstype x198 = x47*x197;
    dstype x199 = x198*x195;
    dstype x200 = -x161 + x194;
    dstype x201 = 1 - pow(x56, 2);
    dstype x202 = 100*x201;
    dstype x203 = x200*x202;
    dstype x204 = x62*x203;
    dstype x205 = n1*x185;
    dstype x206 = x18*(-x205 + n0*x175 - n0*x177 + n0*x178 - x53*x174);
    dstype x207 = 0.5*x0;
    dstype x208 = x73*x203;
    dstype x209 = x71*x192;
    dstype x210 = x49*(-n0*x181 - n1*x163 + n1*x176 - x67*x184 + x70*x182 - x70*x188);
    dstype x211 = (n0*x186 + n1*x179)*x56;
    dstype x212 = x68*x197;
    dstype x213 = x212*x195;
    dstype x214 = n0*x185;
    dstype x215 = x18*(x214 + n1*x175 - n1*x177 + n1*x178 + x70*x174);
    dstype x216 = 0.5*x64;
    dstype x217 = x77*x174;
    dstype x218 = x18*x217;
    dstype x219 = x83*x203;
    dstype x220 = x26*x156;
    dstype x221 = -x220;
    dstype x222 = x32*x35;
    dstype x223 = x41*(x170 + x221 + x222*x171 - x32*x173 + x76*x200);
    dstype x224 = x18*x223;
    dstype x225 = x80*x192;
    dstype x226 = x79*x162;
    dstype x227 = x49*x226;
    dstype x228 = x78*x197;
    dstype x229 = x228*x195;
    dstype x230 = x35*(x161 + x166 + x36*x217 - x36*x223 - x78*x160);
    dstype x231 = (x217 - x223 + x226 - x230)*x56;
    dstype x232 = x49*x230;
    dstype x233 = 0.5*x75;
    dstype x234 = x88*x203;
    dstype x235 = x52*x192;
    dstype x236 = x49*x182;
    dstype x237 = x49*x188;
    dstype x238 = x18*x174;
    dstype x239 = x41*x184;
    dstype x240 = x49*x239;
    dstype x241 = (x174 + x182 - x188 - x239)*x56;
    dstype x242 = x41*x197;
    dstype x243 = x242*x195;
    dstype x244 = 0.5*x85;
    dstype x245 = x93*x180;
    dstype x246 = x245*x120;
    dstype x247 = x246 - x96*x166;
    dstype x248 = x246 + x96*x195;
    dstype x249 = x246 + x96*x200;
    dstype x250 = x15*x155;
    dstype x251 = x21*x250;
    dstype x252 = x93*x192;
    dstype x253 = n1*x252;
    dstype x254 = x93*x191;
    dstype x255 = -x245;
    dstype x256 = x255 + x121*x195;
    dstype x257 = x255 - x121*x166;
    dstype x258 = x255 + x200*x121;
    dstype x259 = 50.0*x29*x190;
    dstype x260 = x71*x259;
    dstype x261 = x157 - x159 - x165;
    dstype x262 = x167 - x168 + x261;
    dstype x263 = x221 - x28*x156;
    dstype x264 = n0*x191;
    dstype x265 = x49*x180;
    dstype x266 = x169 + x261;
    dstype x267 = x160*x145;
    dstype x268 = x41*x36;
    dstype x269 = x268*x153;
    dstype x270 = x49*x269;
    dstype x271 = x26*x191;
    dstype x272 = x80*x259;
    dstype x273 = x79*x153;
    dstype x274 = x49*x273;
    dstype x275 = x54*x259;
    dstype x276 = n1*x191;
    dstype x277 = 0.5*uhat1;
    dstype x278 = mu0*x154;
    dstype x279 = x278*x158;
    dstype x280 = x279*x277;
    dstype x281 = x280 + x65;
    dstype x282 = x202*x281;
    dstype x283 = x62*x282;
    dstype x284 = x54*x191;
    dstype x285 = x65*x284;
    dstype x286 = x31*x153;
    dstype x287 = 0.5*x279;
    dstype x288 = x41*x286*x287;
    dstype x289 = 1.0*x180;
    dstype x290 = 1.0*x166;
    dstype x291 = 1.0*x158;
    dstype x292 = x291*uhat1;
    dstype x293 = x65*x12;
    dstype x294 = x9*x278;
    dstype x295 = x294*x250;
    dstype x296 = x277*x295;
    dstype x297 = x293 - x296;
    dstype x298 = x292 + x297;
    dstype x299 = x298 + n0*x290 - n1*x289;
    dstype x300 = x45*x299;
    dstype x301 = x294*x164;
    dstype x302 = x15*x301;
    dstype x303 = x286*x280;
    dstype x304 = x278*x292;
    dstype x305 = x172*(2*x293 - x302*uhat1 - x36*x303 - x37*x299 + x76*x304);
    dstype x306 = x76*x305;
    dstype x307 = x18*(-n0*x300 + n0*x306 - x14*x288 - x53*x305 - x57*x91);
    dstype x308 = x269*x280;
    dstype x309 = (x31*x308 - x38*x305 - x46*x304 + x52*x299)*x35;
    dstype x310 = x50*x153;
    dstype x311 = x300 - x306 - x309 - x280*x310 + x41*x303;
    dstype x312 = x52*x42;
    dstype x313 = x21*x294*x269*x155;
    dstype x314 = x45*uhat1;
    dstype x315 = x21*x301;
    dstype x316 = x59*x305;
    dstype x317 = x312 - x316 - x43 - x277*x313 + x315*x314 + x37*x316;
    dstype x318 = (n0*x311 - n1*x317)*x56;
    dstype x319 = x8*x52;
    dstype x320 = x37*x305;
    dstype x321 = 0.5*x313;
    dstype x322 = x287*x310;
    dstype x323 = x45*x315;
    dstype x324 = x49*(n0*x309 + x14*x322 - x20*x321 + x20*x323 + x53*x320 + x91*x319);
    dstype x325 = -x280;
    dstype x326 = x325 + x65;
    dstype x327 = x326*x198;
    dstype x328 = x73*x282;
    dstype x329 = (n0*x317 + n1*x311)*x56;
    dstype x330 = x71*x191;
    dstype x331 = x65*x330;
    dstype x332 = x65*x52;
    dstype x333 = -n1*x332;
    dstype x334 = x49*(x333 + n1*x309 + x14*x321 - x14*x323 + x20*x322 - x70*x320);
    dstype x335 = x212*x326;
    dstype x336 = n1*x66;
    dstype x337 = x18*(x336 - n1*x300 + n1*x306 - x20*x288 + x70*x305);
    dstype x338 = x77*x305;
    dstype x339 = 2*x180;
    dstype x340 = n1*x339;
    dstype x341 = -x340;
    dstype x342 = x41*(x298 + x341 + x299*x222 + x32*x303 + x76*x281);
    dstype x343 = x35*(x325 - x65 + x36*x338 - x36*x342 + x78*x304);
    dstype x344 = x56*(x338 - x342 - x343 - x273*x280);
    dstype x345 = x18*x338;
    dstype x346 = x228*x326;
    dstype x347 = x18*x342;
    dstype x348 = x83*x282;
    dstype x349 = x80*x191;
    dstype x350 = x65*x349;
    dstype x351 = x49*x343;
    dstype x352 = x274*x280;
    dstype x353 = x45*x304;
    dstype x354 = (x305 + x308 - x320 - x353)*x56;
    dstype x355 = x332*x191;
    dstype x356 = x49*x320;
    dstype x357 = x18*x305;
    dstype x358 = x88*x202;
    dstype x359 = x281*x358;
    dstype x360 = x270*x280;
    dstype x361 = x49*x353;
    dstype x362 = x242*x326;
    dstype x363 = x8*x254;
    dstype x364 = x91*x363;
    dstype x365 = x8*x94;
    dstype x366 = x365 + x96*x281;
    dstype x367 = x365 + x96*x326;
    dstype x368 = x106 + x365;
    dstype x369 = x276*x245;
    dstype x370 = x65*x93;
    dstype x371 = x276*x370;
    dstype x372 = -x371;
    dstype x373 = -x97;
    dstype x374 = x373 + x281*x121;
    dstype x375 = x373 + x326*x121;
    dstype x376 = pow(n0, 2);
    dstype x377 = 2*x166;
    dstype x378 = x341 + n0*x377;
    dstype x379 = -x292;
    dstype x380 = -x293 + x296 + x379;
    dstype x381 = -n1*x133;
    dstype x382 = x180*x191;
    dstype x383 = x297 + x379;
    dstype x384 = x270*x145;
    dstype x385 = x279*x384;
    dstype x386 = x49*x30*x279;
    dstype x387 = x271*x155;
    dstype x388 = x274*x145;
    dstype x389 = x279*x388;
    dstype x390 = n1*n0*x382;
    dstype x391 = x8*x49;
    dstype x392 = 0.5*uhat2;
    dstype x393 = x279*x392;
    dstype x394 = x393 + x42;
    dstype x395 = x202*x394;
    dstype x396 = x62*x395;
    dstype x397 = x42*x12;
    dstype x398 = x291*uhat2;
    dstype x399 = x295*x392;
    dstype x400 = x397 - x399;
    dstype x401 = x398 + x400;
    dstype x402 = x401 + n0*x289 + n1*x290;
    dstype x403 = x286*x393;
    dstype x404 = x278*x398;
    dstype x405 = x172*(2*x397 - x302*uhat2 - x36*x403 - x37*x402 + x76*x404);
    dstype x406 = x37*x405;
    dstype x407 = x269*x393;
    dstype x408 = (x31*x407 - x38*x405 - x46*x404 + x52*x402)*x35;
    dstype x409 = x49*(x333 + n0*x408 - x13*x321 + x13*x323 + x19*x322 + x53*x406);
    dstype x410 = x45*x402;
    dstype x411 = x76*x405;
    dstype x412 = -x408 + x410 - x411 - x393*x310 + x41*x403;
    dstype x413 = x59*x405;
    dstype x414 = x45*uhat2;
    dstype x415 = -x332 - x413 + x66 + x37*x413 - x392*x313 + x414*x315;
    dstype x416 = (n0*x412 - n1*x415)*x56;
    dstype x417 = x42*x284;
    dstype x418 = -x393;
    dstype x419 = x418 + x42;
    dstype x420 = x419*x198;
    dstype x421 = x18*(x336 - n0*x410 + n0*x411 - x19*x288 - x53*x405);
    dstype x422 = x73*x395;
    dstype x423 = x18*(-n1*x410 + n1*x411 - x13*x288 - x57*x376 + x70*x405);
    dstype x424 = (n0*x415 + n1*x412)*x56;
    dstype x425 = x49*(n1*x408 + x13*x322 + x19*x321 - x19*x323 + x376*x319 - x70*x406);
    dstype x426 = x42*x330;
    dstype x427 = x419*x212;
    dstype x428 = x77*x405;
    dstype x429 = n0*x339;
    dstype x430 = x41*(x401 + x429 + x32*x403 + x402*x222 + x76*x394);
    dstype x431 = x35*(x418 - x42 + x36*x428 - x36*x430 + x78*x404);
    dstype x432 = x56*(x428 - x430 - x431 - x273*x393);
    dstype x433 = x83*x395;
    dstype x434 = x18*x430;
    dstype x435 = x419*x228;
    dstype x436 = x42*x349;
    dstype x437 = x49*x431;
    dstype x438 = x18*x405;
    dstype x439 = x77*x438;
    dstype x440 = x274*x393;
    dstype x441 = x45*x404;
    dstype x442 = (x405 - x406 + x407 - x441)*x56;
    dstype x443 = x312*x191;
    dstype x444 = x270*x393;
    dstype x445 = x394*x358;
    dstype x446 = x49*x441;
    dstype x447 = x49*x406;
    dstype x448 = x419*x242;
    dstype x449 = x373 + x106*x120;
    dstype x450 = x373 + x96*x419;
    dstype x451 = x373 + x96*x394;
    dstype x452 = x438*x100;
    dstype x453 = -x364;
    dstype x454 = x365 + x370;
    dstype x455 = x370 + x394*x121;
    dstype x456 = x370 + x419*x121;
    dstype x457 = x429 + n1*x377;
    dstype x458 = -x398;
    dstype x459 = -x397 + x399 + x458;
    dstype x460 = x400 + x458;
    dstype x461 = x10*x278;
    dstype x462 = 50*x461;
    dstype x463 = x462*x201;
    dstype x464 = x62*x463;
    dstype x465 = x294*x166;
    dstype x466 = (1.0/2.0)*x465;
    dstype x467 = -x10 + x466 - x8;
    dstype x468 = (1.0/2.0)*x461;
    dstype x469 = x468*x153;
    dstype x470 = x31*x469;
    dstype x471 = x172*(x465 + x36*x470 - x37*x467 - x76*x461);
    dstype x472 = x41*x470;
    dstype x473 = (-x36*x472 - x38*x471 + x46*x461 + x52*x467)*x35;
    dstype x474 = x45*x467;
    dstype x475 = x76*x471;
    dstype x476 = x50*x469;
    dstype x477 = -x472 - x473 + x474 - x475 + x476;
    dstype x478 = x59*x471;
    dstype x479 = (1.0/2.0)*x294;
    dstype x480 = x36*x479*x153;
    dstype x481 = x45*x294*x180;
    dstype x482 = -x478 - x481 + x37*x478 + x480*x185;
    dstype x483 = (n0*x477 - n1*x482)*x56;
    dstype x484 = x37*x471;
    dstype x485 = x49*(n0*x473 - n0*x476 - n1*x481 + x480*x205 + x53*x484);
    dstype x486 = x462*x196;
    dstype x487 = x47*x486;
    dstype x488 = x18*(n0*x472 - n0*x474 + n0*x475 - x53*x471);
    dstype x489 = x73*x463;
    dstype x490 = (n0*x482 + n1*x477)*x56;
    dstype x491 = x49*(n0*x481 + n1*x473 - n1*x476 - x480*x214 - x70*x484);
    dstype x492 = x68*x486;
    dstype x493 = x18*(n1*x472 - n1*x474 + n1*x475 + x70*x471);
    dstype x494 = x77*x471;
    dstype x495 = x78*x461;
    dstype x496 = x467 - x32*x470 + x467*x222 - x76*x468;
    dstype x497 = x41*x496;
    dstype x498 = (x468 - x495 + x36*x494 - x36*x497)*x35;
    dstype x499 = x79*x469;
    dstype x500 = (x494 - x497 - x498 + x499)*x56;
    dstype x501 = x18*x471;
    dstype x502 = x77*x501;
    dstype x503 = 50*x495*x196;
    dstype x504 = x86*x496;
    dstype x505 = x49*x498;
    dstype x506 = x83*x463;
    dstype x507 = x49*x499;
    dstype x508 = x88*x463;
    dstype x509 = x49*x484;
    dstype x510 = x469*x268;
    dstype x511 = x45*x461;
    dstype x512 = (x471 - x484 - x510 + x511)*x56;
    dstype x513 = x49*x511;
    dstype x514 = x49*x510;
    dstype x515 = x41*x486;
    dstype x516 = x90*x479*x106;
    dstype x517 = x468*x121;
    dstype x518 = x10 + x8;
    dstype x519 = x466 + x518;
    dstype x520 = -x466 + x518;

    f[0 * N + i] = -uhat0 + 0.5*(mu4 + uq0 + x0*(x48 + x55 + x63) + x64*(x69 + x72 + x74) + x75*(x81 + x82 + x84) + x85*(x86 - x87 + x89));
    f[1 * N + i] = -uhat1 + 0.5*(mu5 + uq1 + x64*(x117 + x118 + x119 + x69*x100) + x75*(x112 + x114 + x115 + x82*x100) + x85*(x110 + x111 - x87*x108) + (x101 + x103 + x105 + x109)*x0);
    f[2 * N + i] = -uhat2 + 0.5*(mu6 + uq2 + x0*(x117 + x132 + x48*x123 + x55*x125) + x64*(x128 + x129 + x130 + x69*x123) + x85*(x131 + x86*x123 - x87*x125) + (-x124 + x127 + x81*x125 + x82*x123)*x75);
    f[3 * N + i] = -uhat3 + 0.5*(mu7 + uq3 + x0*(x138 - x139 + x140 + x55*x30) + x75*(-x141 + x81*x30 + x82*x39 + x84*x24) + x85*(x136 + x137 - x87*x30) + (x134 + x135 + x69*x39 + x72*x30)*x64);
    J1[0 * N + i] = 0.5 + x142 + x143 + x144;
    J1[1 * N + i] = 0.5*x112 + 0.5*x114 + 0.5*x115 + x100*x143;
    J1[2 * N + i] = -0.5*x124 + 0.5*x127 + x123*x143 + x125*x144;
    J1[3 * N + i] = -0.5*x141 + x24*x142 + x39*x143 + x81*x145;
    J1[4 * N + i] = x146 + x147 + 0.5*x63;
    J1[5 * N + i] = 0.5 + 0.5*x101 + 0.5*x103 + 0.5*x105 + 0.5*x109;
    J1[6 * N + i] = 0.5*x132 + x148 + x123*x147 + x125*x146;
    J1[7 * N + i] = 0.5*x138 - 0.5*x139 + 0.5*x140 + x55*x145;
    J1[8 * N + i] = x149 + x150 + 0.5*x74;
    J1[9 * N + i] = 0.5*x118 + 0.5*x119 + x148 + x100*x150;
    J1[10 * N + i] = 0.5 + 0.5*x128 + 0.5*x129 + 0.5*x130 + x123*x150;
    J1[11 * N + i] = 0.5*x134 + 0.5*x135 + x39*x150 + x72*x145;
    J1[12 * N + i] = -x151 + x152 + 0.5*x89;
    J1[13 * N + i] = 0.5*x110 + 0.5*x111 - x108*x151;
    J1[14 * N + i] = 0.5*x131 + x123*x152 - x125*x151;
    J1[15 * N + i] = 0.5 + 0.5*x136 + 0.5*x137 - x87*x145;
    J1[16 * N + i] = 0;
    J1[17 * N + i] = 0;
    J1[18 * N + i] = 0;
    J1[19 * N + i] = 0;
    J1[20 * N + i] = 0;
    J1[21 * N + i] = 0;
    J1[22 * N + i] = 0;
    J1[23 * N + i] = 0;
    J1[24 * N + i] = 0;
    J1[25 * N + i] = 0;
    J1[26 * N + i] = 0;
    J1[27 * N + i] = 0;
    J1[28 * N + i] = 0;
    J1[29 * N + i] = 0;
    J1[30 * N + i] = 0;
    J1[31 * N + i] = 0;
    J1[32 * N + i] = 0;
    J1[33 * N + i] = 0;
    J1[34 * N + i] = 0;
    J1[35 * N + i] = 0;
    J1[36 * N + i] = 0;
    J1[37 * N + i] = 0;
    J1[38 * N + i] = 0;
    J1[39 * N + i] = 0;
    J1[40 * N + i] = 0;
    J1[41 * N + i] = 0;
    J1[42 * N + i] = 0;
    J1[43 * N + i] = 0;
    J1[44 * N + i] = 0;
    J1[45 * N + i] = 0;
    J1[46 * N + i] = 0;
    J1[47 * N + i] = 0;
    J3[0 * N + i] = -1 + (x187 + x189 - x193 + x199 + x204 + x206)*x207 + (x208 - x209 + x210 + x211 + x213 + x215)*x216 + (-x218 + x219 + x224 - x225 - x227 + x229 + x231 + x232)*x233 + (x234 + x235 - x236 + x237 - x238 + x240 + x241 + x243)*x244;
    J3[1 * N + i] = x216*(x253 + x208*x102 - x209*x108 + x210*x108 + x211*x102 + x213*x100 + x215*x100 + x69*x248 + x72*x247 + x74*x249) + x233*(-x218*x100 + x219*x102 + x224*x100 - x225*x108 - x227*x108 + x229*x100 + x231*x102 + x232*x108 + x81*x247 + x82*x248 + x84*x249 - x251*x121*x191 - x90*x116*x180) + x244*(x234*x102 + x235*x108 - x236*x108 + x237*x108 - x238*x100 + x240*x108 + x241*x102 + x243*x100 + x86*x248 - x87*x247 + x89*x249) + (x100*x199 + x102*x187 + x108*x189 - x108*x193 + x204*x102 + x206*x100 + x48*x248 + x55*x247 + x63*x249 - x94*x192)*x207;
    J3[2 * N + i] = x207*(x253 + x123*x199 + x125*x189 - x125*x193 + x126*x187 + x204*x126 + x206*x123 + x48*x256 + x55*x257 + x63*x258) + x216*(-n0*x252 + x208*x126 - x209*x125 + x210*x125 + x211*x126 + x213*x123 + x215*x123 + x69*x256 + x72*x257 + x74*x258) + x233*(x104*x180 - x218*x123 + x219*x126 + x224*x123 - x225*x125 - x227*x125 + x229*x123 + x231*x126 + x232*x125 + x251*x254 + x81*x257 + x82*x256 + x84*x258) + x244*(x234*x126 + x235*x125 - x236*x125 + x237*x125 - x238*x123 + x240*x125 + x241*x126 + x243*x123 + x86*x256 - x87*x257 + x89*x258);
    J3[3 * N + i] = x207*(n1*x265 + x24*x187 + x24*x204 + x263*x146 - x275*x166 + x276*x251 + x30*x189 + x39*x199 + x39*x206 + x48*x266 + x63*x262) + x216*(-n0*x265 + x24*x208 + x24*x211 - x260*x166 + x263*x149 - x264*x251 + x30*x210 + x39*x213 + x39*x215 + x69*x266 + x74*x262) + x233*(x24*x219 + x24*x231 + x263*x144 - x272*x166 - x274*x267 + x30*x232 - x39*x218 + x39*x224 + x39*x229 + x49*x220 + x82*x266 + x84*x262 + x15*x271/pow(uhat0, 4)) + x244*(x24*x234 + x24*x241 - x263*x151 + x270*x267 - x30*x236 + x30*x237 - x39*x238 + x39*x243 + x86*x266 + x89*x262 + x52*x259*x166);
    J3[4 * N + i] = (x283 + x285 + x307 + x318 + x324 + x327)*x207 + (x328 + x329 + x331 + x334 + x335 + x337)*x216 + (x344 - x345 + x346 + x347 + x348 + x350 + x351 + x352)*x233 + (x354 - x355 + x356 - x357 + x359 - x360 + x361 + x362)*x244;
    J3[5 * N + i] = -1 + x207*(x364 + x283*x102 + x285*x108 + x307*x100 + x318*x102 + x324*x108 + x327*x100 + x48*x367 + x55*x368 + x63*x366) + x216*(x372 + x328*x102 + x329*x102 + x331*x108 + x334*x108 + x335*x100 + x337*x100 + x69*x367 + x72*x368 + x74*x366) + x233*(x369 + x344*x102 - x345*x100 + x346*x100 + x347*x100 + x348*x102 + x350*x108 + x351*x108 + x352*x108 - x8*x105 + x81*x368 + x82*x367 + x84*x366) + x244*(x354*x102 - x355*x108 + x356*x108 - x357*x100 + x359*x102 - x360*x108 + x361*x108 + x362*x100 + x86*x367 - x87*x368 + x89*x366);
    J3[6 * N + i] = x207*(x372 + x283*x126 + x285*x125 + x307*x123 + x318*x126 + x324*x125 + x327*x123 + x48*x375 + x63*x374) + x216*(x328*x126 + x329*x126 + x331*x125 + x334*x125 + x335*x123 + x337*x123 + x376*x363 + x69*x375 + x74*x374) + x233*(x113 - x264*x245 + x344*x126 - x345*x123 + x346*x123 + x347*x123 + x348*x126 + x350*x125 + x351*x125 + x352*x125 + x82*x375 + x84*x374) + (x354*x126 - x355*x125 + x356*x125 - x357*x123 + x359*x126 - x360*x125 + x361*x125 + x362*x123 + x86*x375 + x89*x374)*x244;
    J3[7 * N + i] = x207*(-x390 + x24*x283 + x24*x318 + x30*x324 + x378*x146 + x39*x307 + x39*x327 + x48*x383 + x63*x380 + x65*x275 + x91*x391) + x216*(x381 + x24*x328 + x24*x329 + x30*x334 + x376*x382 + x378*x149 + x39*x335 + x39*x337 + x65*x260 + x69*x383 + x74*x380) + x233*(-n0*x387 + x24*x344 + x24*x348 + x30*x351 + x378*x144 + x389*uhat1 - x39*x345 + x39*x346 + x39*x347 + x49*x340 + x65*x272 + x82*x383 + x84*x380) + x244*(x24*x354 + x24*x359 - x259*x332 + x30*x356 - x378*x151 - x385*uhat1 + x386*x314 - x39*x357 + x39*x362 + x86*x383 + x89*x380);
    J3[8 * N + i] = (x396 + x409 + x416 + x417 + x420 + x421)*x207 + (x422 + x423 + x424 + x425 + x426 + x427)*x216 + (x432 + x433 + x434 + x435 + x436 + x437 - x439 + x440)*x233 + (-x438 + x442 - x443 - x444 + x445 + x446 + x447 + x448)*x244;
    J3[9 * N + i] = x207*(x396*x102 + x409*x108 + x416*x102 + x417*x108 + x420*x100 + x421*x100 + x48*x450 + x55*x449 + x63*x451 + pow(n1, 3)*x90*x363) + x216*(x453 + x422*x102 + x423*x100 + x424*x102 + x425*x108 + x426*x108 + x427*x100 + x69*x450 + x72*x449 + x74*x451) + x233*(x113 + x432*x102 + x433*x102 + x434*x100 + x435*x100 + x436*x108 + x437*x108 + x440*x108 - x77*x452 + x81*x449 + x82*x450 + x84*x451 + x94*x382) + x244*(-x452 + x442*x102 - x443*x108 - x444*x108 + x445*x102 + x446*x108 + x447*x108 + x448*x100 + x86*x450 - x87*x449 + x89*x451);
    J3[10 * N + i] = -1 + x207*(x453 + x396*x126 + x409*x125 + x416*x126 + x417*x125 + x420*x123 + x421*x123 + x48*x456 + x55*x454 + x63*x455) + x216*(x371 + x422*x126 + x423*x123 + x424*x126 + x425*x125 + x426*x125 + x427*x123 + x69*x456 + x72*x454 + x74*x455) + x233*(-x369 + x432*x126 + x433*x126 + x434*x123 + x435*x123 + x436*x125 + x437*x125 - x439*x123 + x440*x125 - x65*x104 + x81*x454 + x82*x456 + x84*x455) + x244*(-x438*x123 + x442*x126 - x443*x125 - x444*x125 + x445*x126 + x446*x125 + x447*x125 + x448*x123 + x86*x456 - x87*x454 + x89*x455);
    J3[11 * N + i] = x207*(x381 + x24*x396 + x24*x416 + x30*x409 + x39*x420 + x39*x421 + x42*x275 + x457*x146 + x48*x460 + x63*x459 - x91*x382) + x216*(x390 + x24*x422 + x24*x424 + x30*x425 + x376*x391 + x39*x423 + x39*x427 + x42*x260 + x457*x149 + x69*x460 + x74*x459) + x233*(-n1*x387 + x24*x432 + x24*x433 + x30*x437 + x389*uhat2 + x39*x434 + x39*x435 - x39*x439 + x42*x272 + x457*x144 - x49*x429 + x82*x460 + x84*x459) + x244*(x24*x442 + x24*x445 - x259*x312 + x30*x447 - x385*uhat2 - x39*x438 + x39*x448 + x414*x386 - x457*x151 + x86*x460 + x89*x459);
    J3[12 * N + i] = x207*(-x464 + x483 + x485 + x487 + x488) + x216*(-x489 + x490 + x491 + x492 + x493) + x233*(x500 - x502 + x503 + x504 + x505 - x506 - x507) + x244*(-x501 - x508 + x509 + x512 - x513 + x514 + x515);
    J3[13 * N + i] = x207*(-x464*x102 + x48*x516 + x483*x102 + x485*x108 + x487*x100 + x488*x100 - x63*x516) + x216*(-x489*x102 + x490*x102 + x491*x108 + x492*x100 + x493*x100 + x69*x516 - x74*x516) + x233*(x496*x110 + x500*x102 - x502*x100 + x503*x100 + x505*x108 - x506*x102 - x507*x108 + x82*x516 - x84*x516) + x244*(-x501*x100 - x508*x102 + x509*x108 + x512*x102 - x513*x108 + x514*x108 + x515*x100 + x86*x516 - x89*x516);
    J3[14 * N + i] = x207*(-x464*x126 + x48*x517 + x483*x126 + x485*x125 + x487*x123 + x488*x123 - x63*x517) + x216*(-x489*x126 + x490*x126 + x491*x125 + x492*x123 + x493*x123 + x69*x517 - x74*x517) + x233*(x500*x126 - x502*x123 + x503*x123 + x504*x123 + x505*x125 - x506*x126 - x507*x125 + x82*x517 - x84*x517) + x244*(-x501*x123 - x508*x126 + x509*x125 + x512*x126 - x513*x125 + x514*x125 + x515*x123 + x86*x517 - x89*x517);
    J3[15 * N + i] = -1 + x207*(-x24*x464 + x24*x483 + x30*x485 + x39*x487 + x39*x488 + x48*x519 + x63*x520) + x216*(-x24*x489 + x24*x490 + x30*x491 + x39*x492 + x39*x493 + x69*x519 + x74*x520) + x233*(x24*x500 - x24*x506 + x30*x505 - x39*x502 + x39*x503 - x461*x388 + x496*x136 + x82*x519 + x84*x520) + x244*(-x24*x508 + x24*x512 + x30*x509 - x30*x513 - x39*x501 + x39*x515 + x461*x384 + x86*x519 + x89*x520);
  });
}

void HdgFbou(dstype* f, dstype* f_udg, dstype* f_wdg, dstype* f_uhg, const dstype* xdg, const dstype* udg, const dstype* odg, const dstype* wdg, const dstype* uhg,
           const dstype* nlg, const dstype* tau, const dstype* uinf, const dstype* param, const dstype time,
           const int modelnumber, const int ib, const int ng, const int nc, const int ncu, const int nd,
           const int ncx, const int nco, const int ncw) {
    if (ib == 1 )
        HdgFbou1(f, f_udg, f_wdg, f_uhg, xdg, udg, odg, wdg, uhg, nlg, tau, uinf, param, time, modelnumber,
                        ng, nc, ncu, nd, ncx, nco, ncw, nc, ncu, nd);
    else if (ib == 2 )
        HdgFbou2(f, f_udg, f_wdg, f_uhg, xdg, udg, odg, wdg, uhg, nlg, tau, uinf, param, time, modelnumber,
                        ng, nc, ncu, nd, ncx, nco, ncw, nc, ncu, nd);
}
