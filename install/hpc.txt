Below are the steps to deploy, compile, build and run Exasim on a HPC system

1. Create an empty Exasim folder and build subfolder on the target HPC system
  
     mkdir Exasim
     cd Exasim
     mkdir build 

2. Transfer Exasim/install folder from your local machine to the Exasim folder on the target HPC system

3. Transfer kokkos folder from your local machine to the Exasim folder on the target HPC system. The kokkos folder must be "fresh" and "clean", meaning that you have not compiled kokkos at all. You can download the latest release version of kokkos from https://github.com/kokkos/kokkos and transfer it to the Exasim folder on the target HPC system.

4. On the target HPC system, build Kokkos libraries with the following instructions
    
    a. Build Kokkos serial library for CPU platform

      	module load cmake/3.20.2

        cd Exasim/kokkos
        mkdir buildserial
        cd buildserial
        cmake .. -DCMAKE_INSTALL_PREFIX=../buildserial
        make install   

      Please use cmake version 3.20 or higher to compile kokkos. You can choose a C++ compiler by using the flag -DCMAKE_CXX_COMPILER.

    b. Build Kokkos CUDA library for NVIDIA GPU platform

        module load cmake/3.20.2
        module load cuda/11.2.0
        module load clang/ibm-16.0.6-cuda-11.2.0-gcc-8.3.1

        cd Exasim/kokkos
        mkdir buildcuda
        cd buildcuda
        cmake .. -DCMAKE_CXX_COMPILER=clang++ -DKokkos_ENABLE_CUDA=ON -DCMAKE_INSTALL_PREFIX=../buildcuda
        make install   

      Please use cmake 3.20 (or higher), clang++ 12 (or higher), cuda 11 (or higher) to compile kokkos. 

    c. Build Kokkos HIP library for AMD GPU platform

	module load cmake/3.20.2		
       	module load rocm/6.2.1       	
       	export CRAYPE_LINK_TYPE=dynamic

      	cd Exasim/kokkos
      	mkdir buildhip
      	cd buildhip
      	cmake ..  -DCMAKE_CXX_COMPILER=hipcc -DKokkos_ENABLE_HIP=ON -DKokkos_ENABLE_ROCM=ON -DKokkos_ARCH_VEGA90A=ON -DCMAKE_INSTALL_PREFIX=../buildhip 
      	make install   

      You should modify the flag -DKokkos_ARCH_VEGA90A=ON to suit your AMD GPU. Please see https://kokkos.org/kokkos-core-wiki/API/core/Macros.html to use the right flag for different architectures.		


5. Run an pdeapp script on your local machine to generate backend/Model, datain, and dataout folders

6. Transfer Exasim/backend folder from your local machine to the Exasim folder on the target HPC system

7. Transfer datain and dataout folders from your local machine to the Exasim/build folder on the target HPC system

8. Compile and build Exasim on the target HPC system with the following instructions

    a. Go to Exasim/build 

    b. Compile Serial version
 
       cmake -D CMAKE_CXX_COMPILER=clang++ -D EXASIM_NOMPI=ON ../install

    c. Compile MPI version
 
       cmake -D CMAKE_CXX_COMPILER=clang++ -D EXASIM_MPI=ON ../install

    d. Compile both Serial and MPI versions in one shot
 
       cmake -D CMAKE_CXX_COMPILER=clang++ -D EXASIM_NOMPI=ON -D EXASIM_MPI=ON ../install

    e. Compile Serial/CUDA version
 
       cmake -D CMAKE_CXX_COMPILER=clang++ -D EXASIM_NOMPI=ON -D EXASIM_CUDA=ON ../install

    f. Compile MPI/CUDA version
 
       cmake -D CMAKE_CXX_COMPILER=clang++ -D EXASIM_MPI=ON -D EXASIM_CUDA=ON ../install

    g. Compile both Serial/CUDA and MPI/CUDA versions in one shot
 
       cmake -D CMAKE_CXX_COMPILER=clang++ -D EXASIM_NOMPI=ON -D EXASIM_MPI=ON -D EXASIM_CUDA=ON ../install

    h. Compile Serial/HIP version
 
       module load rocm/6.2.1	
       cmake -D CMAKE_CXX_COMPILER=hipcc -D EXASIM_NOMPI=ON -D EXASIM_HIP=ON ../install

    i. Compile MPI/HIP version

       module load cray-mpich
       module load rocmcc/6.1.2-magic
 
       cmake -D CMAKE_CXX_COMPILER=mpiamdclang++ -D EXASIM_MPI=ON -D EXASIM_HIP=ON ../install

    j. After choosing the Exasim version to be compiled, you can build Exasim as follows

       cmake --build .

9. Run Exasim on the target HPC system with the following instructions

    a. Go to Exasim/build 

    b. Run Serial version on one processor
 
        ./cpuEXASIM 1 datain/ dataout/out

    c. Run CUDA or HIP version on one GPU
 
        ./gpuEXASIM 1 datain/ dataout/out

    d. Run MPI version on many processors 
 
	mpirun -np 4 ./cpumpiEXASIM 1 datain/ dataout/out

       You should replace -np 4 with the correct number of processors you specify in pdeapp script.  

    e. Run CUDA version on many GPUs 

        bsub -nnodes 1 -Ip -W 10 /bin/tcsh
	jsrun --smpiargs="-gpu" -n1 -a4 -c 4 -g 4 ./gpumpiEXASIM 1 datain/ dataout/out

    f. Run HIP version on many GPUs 

	export MPICH_GPU_SUPPORT_ENABLED=1
	flux run -N2 -n4 -g1 -o gpu-affinity=per-task --exclusive ./gpumpiEXASIM 1 datain/ dataout/out

10. Transfer the build/dataout folder from the target HPC system to Exasim/build on your local machine. 

11. Postprocess and view the numerical solution in Exasim/build/dataout on your local machine with Paraview. 
      
12. Repeat Steps 5 to 11 if you want to solve new PDE models.









 
